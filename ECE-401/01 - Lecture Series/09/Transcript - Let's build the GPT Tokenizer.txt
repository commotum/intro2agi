About

696,112 views  Feb 20, 2024
The Tokenizer is a necessary and pervasive component of Large Language Models (LLMs), where it translates between strings and tokens (text chunks). Tokenizers are a completely separate stage of the LLM pipeline: they have their own training sets, training algorithms (Byte Pair Encoding), and after training implement two fundamental functions: encode() from strings to tokens, and decode() back from tokens to strings. In this lecture we build from scratch the Tokenizer used in the GPT series from OpenAI. In the process, we will see that a lot of weird behaviors and problems of LLMs actually trace back to tokenization. We'll go through a number of these issues, discuss why tokenization is at fault, and why someone out there ideally finds a way to delete this stage entirely.

Chapters:
00:00:00 intro: Tokenization, GPT-2 paper, tokenization-related issues
00:05:50 tokenization by example in a Web UI (tiktokenizer)
00:14:56 strings in Python, Unicode code points
00:18:15 Unicode byte encodings, ASCII, UTF-8, UTF-16, UTF-32
00:22:47 daydreaming: deleting tokenization
00:23:50 Byte Pair Encoding (BPE) algorithm walkthrough
00:27:02 starting the implementation
00:28:35 counting consecutive pairs, finding most common pair
00:30:36 merging the most common pair
00:34:58 training the tokenizer: adding the while loop, compression ratio
00:39:20 tokenizer/LLM diagram: it is a completely separate stage
00:42:47 decoding tokens to strings
00:48:21 encoding strings to tokens
00:57:36 regex patterns to force splits across categories
01:11:38 tiktoken library intro, differences between GPT-2/GPT-4 regex
01:14:59 GPT-2 encoder.py released by OpenAI walkthrough
01:18:26 special tokens, tiktoken handling of, GPT-2/GPT-4 differences
01:25:28 minbpe exercise time! write your own GPT-4 tokenizer
01:28:42 sentencepiece library intro, used to train Llama 2 vocabulary
01:43:27 how to set vocabulary set? revisiting gpt.py transformer
01:48:11 training new tokens, example of prompt compression
01:49:58 multimodal [image, video, audio] tokenization with vector quantization
01:51:41 revisiting and explaining the quirks of LLM tokenization
02:10:20 final recommendations
02:12:50 ??? :)

Exercises:
Advised flow: reference this document and try to implement the steps before I give away the partial solutions in the video. The full solutions if you're getting stuck are in the minbpe code https://github.com/karpathy/minbpe/bl...

Links:
Google colab for the video: https://colab.research.google.com/dri...
GitHub repo for the video: minBPE https://github.com/karpathy/minbpe
Playlist of the whole Zero to Hero series so far:    â€¢ The spelled-out intro to neural netwo...  
our Discord channel:   / discord  
my Twitter:   / karpathy  

Supplementary links:
tiktokenizer https://tiktokenizer.vercel.app
tiktoken from OpenAI: https://github.com/openai/tiktoken
sentencepiece from Google https://github.com/google/sentencepiece

Transcript


Search in video
intro: Tokenization, GPT-2 paper, tokenization-related issues
0:00
hi everyone so in this video I'd like us to cover the process of tokenization in large language models now you see here
0:06
that I have a set face and that's because uh tokenization is my least favorite part of working with large
0:11
language models but unfortunately it is necessary to understand in some detail because it it is fairly hairy gnarly and
0:17
there's a lot of hidden foot guns to be aware of and a lot of oddness with large language models typically traces back to
0:24
tokenization so what is tokenization now in my previous video Let's Build GPT from scratch uh we
0:31
actually already did tokenization but we did a very naive simple version of tokenization so when you go to the
0:37
Google colab for that video uh you see here that we loaded our training set and
0:43
our training set was this uh Shakespeare uh data set now in the beginning the Shakespeare data set is just a large
0:49
string in Python it's just text and so the question is how do we plug text into
0:54
large language models and in this case here we created a vocabulary of 65
1:01
possible characters that we saw occur in this string these were the possible characters and we saw that there are 65
1:07
of them and then we created a a lookup table for converting from every possible
1:13
character a little string piece into a token an integer so here for example we tokenized
1:20
the string High there and we received this sequence of tokens and here we took the first 1,000
1:27
characters of our data set and we encoded it into tokens and because it is this is character level we received
1:34
1,000 tokens in a sequence so token 18 47
1:40
Etc now later we saw that the way we plug these tokens into the language
1:45
model is by using an embedding table and so basically if we have 65
1:51
possible tokens then this embedding table is going to have 65 rows and roughly speaking we're taking the
1:58
integer associated with every single sing Le token we're using that as a lookup into this table and we're
2:04
plucking out the corresponding row and this row is a uh is trainable parameters
2:09
that we're going to train using back propagation and this is the vector that then feeds into the Transformer um and
2:15
that's how the Transformer Ser of perceives every single token so here we had a very naive
2:21
tokenization process that was a character level tokenizer but in practice in state-ofthe-art uh language
2:27
models people use a lot more complicated schemes unfortunately uh for constructing these uh token
2:34
vocabularies so we're not dealing on the Character level we're dealing on chunk level and the way these um character
2:41
chunks are constructed is using algorithms such as for example the bik pair in coding algorithm which we're
2:46
going to go into in detail um and cover in this video I'd like to briefly show
2:52
you the paper that introduced a bite level encoding as a mechanism for tokenization in the context of large
2:58
language models and I would say that that's probably the gpt2 paper and if you scroll down here to the section
3:05
input representation this is where they cover tokenization the kinds of properties that you'd like the tokenization to have and they conclude
3:13
here that they're going to have a tokenizer where you have a vocabulary of 50,2 57 possible
3:20
tokens and the context size is going to be 1,24 tokens so in the in in the
3:27
attention layer of the Transformer neural network every single token is attending to the previous tokens in the sequence and it's
3:34
going to see up to 1,24 tokens so tokens are this like fundamental unit um the
3:40
atom of uh large language models if you will and everything is in units of tokens everything is about tokens and
3:47
tokenization is the process for translating strings or text into sequences of tokens and uh vice versa
3:54
when you go into the Llama 2 paper as well I can show you that when you search token you're going to get get 63 hits um
4:01
and that's because tokens are again pervasive so here they mentioned that they trained on two trillion tokens of
4:06
data and so on so we're going to build our own tokenizer luckily the bite be encoding
4:13
algorithm is not uh that super complicated and we can build it from scratch ourselves and we'll see exactly
4:18
how this works before we dive into code I'd like to give you a brief Taste of some of the complexities that come from
4:24
the tokenization because I just want to make sure that we motivate it sufficiently for why we are doing all
4:29
this and why this is so gross so tokenization is at the heart of a lot of weirdness in large language models and I
4:36
would advise that you do not brush it off a lot of the issues that may look like just issues with the new network
4:42
architecture or the large language model itself are actually issues with the tokenization and fundamentally Trace uh
4:49
back to it so if you've noticed any issues with large language models can't
4:54
you know not able to do spelling tasks very easily that's usually due to tokenization simple string processing
5:00
can be difficult for the large language model to perform natively uh non-english languages can
5:06
work much worse and to a large extent this is due to tokenization sometimes llms are bad at
5:11
simple arithmetic also can trace be traced to tokenization uh gbt2 specifically would
5:17
have had quite a bit more issues with python than uh future versions of it due to tokenization there's a lot of other
5:24
issues maybe you've seen weird warnings about a trailing whites space this is a tokenization issue um
5:30
if you had asked GPT earlier about solid gold Magikarp and what it is you would see the llm go totally crazy and it
5:37
would start going off about a completely unrelated tangent topic maybe you've been told to use yl over Json in
5:43
structure data all of that has to do with tokenization so basically tokenization is at the heart of many
5:49
issues I will look back around to these at the end of the video but for now let me just um skip over it a little bit and
tokenization by example in a Web UI (tiktokenizer)
5:56
let's go to this web app um the Tik tokenizer bell.app so I have it loaded
6:02
here and what I like about this web app is that tokenization is running a sort of live in your browser in JavaScript so
6:09
you can just type here stuff hello world and the whole string rokenes so here what we see on uh the
6:18
left is a string that you put in on the right we're currently using the gpt2 tokenizer we see that this string that I
6:24
pasted here is currently tokenizing into 300 tokens and here they are sort of uh
6:30
shown explicitly in different colors for every single token so for example uh this word tokenization became two tokens
6:38
the token 3,642 and
6:44
1,634 the token um space is is token 318
6:50
so be careful on the bottom you can show white space and keep in mind that there are spaces and uh sln new line
6:57
characters in here but you can hide them for clarity the token space at is token 379
7:06
the to the Token space the is 262 Etc so
7:11
you notice here that the space is part of that uh token chunk now so this is kind of like how
7:18
our English sentence broke up and that seems all well and good now now here I
7:24
put in some arithmetic so we see that uh the token 127 Plus and then token six
7:31
space 6 followed by 77 so what's happening here is that 127 is feeding in as a single token into the large
7:38
language model but the um number 677 will actually feed in as two separate
7:44
tokens and so the large language model has to sort of um take account of that
7:50
and process it correctly in its Network and see here 804 will be broken up into
7:56
two tokens and it's is all completely arbitrary and here I have another example of four-digit numbers and they
8:02
break up in a way that they break up and it's totally arbitrary sometimes you have um multiple digits single token
8:08
sometimes you have individual digits as many tokens and it's all kind of pretty arbitrary and coming out of the
8:14
tokenizer here's another example we have the string egg and you see here that
8:21
this became two tokens but for some reason when I say I have an egg you see when it's a space
8:27
egg it's two token it's sorry it's a single token so just egg by itself in
8:33
the beginning of a sentence is two tokens but here as a space egg is suddenly a single token uh for the exact
8:40
same string okay here lowercase egg turns out to be a single token and in
8:46
particular notice that the color is different so this is a different token so this is case sensitive and of course
8:51
a capital egg would also be different tokens and again um this would be two
8:57
tokens arbitrarily so so for the same concept egg depending on if it's in the beginning of a sentence at the end of a
9:03
sentence lowercase uppercase or mixed all this will be uh basically very different tokens and different IDs and
9:10
the language model has to learn from raw data from all the internet text that it's going to be training on that these are actually all the exact same concept
9:17
and it has to sort of group them in the parameters of the neural network and understand just based on the data
9:22
patterns that these are all very similar but maybe not almost exactly similar but but very very similar
9:30
um after the EG demonstration here I have um an introduction from open a eyes
9:35
chbt in Korean so manaso Pang uh Etc uh
9:41
so this is in Korean and the reason I put this here is because you'll notice
9:47
that um non-english languages work slightly worse in Chachi part of this is
9:54
because of course the training data set for Chachi is much larger for English and for everything else but the same is
9:59
true not just for the large language model itself but also for the tokenizer so when we train the tokenizer we're
10:05
going to see that there's a training set as well and there's a lot more English than non-english and what ends up
10:11
happening is that we're going to have a lot more longer tokens for
10:16
English so how do I put this if you have a single sentence in English and you tokenize it you might see that it's 10
10:23
tokens or something like that but if you translate that sentence into say Korean or Japanese or something else you'll
10:29
typically see that the number of tokens used is much larger and that's because the chunks here are a lot more broken up
10:36
so we're using a lot more tokens for the exact same thing and what this does is it bloats up the sequence length of all
10:43
the documents so you're using up more tokens and then in the attention of the Transformer when these tokens try to
10:49
attend each other you are running out of context um in the maximum context length
10:55
of that Transformer and so basically all the non-english text is stretched out
11:01
from the perspective of the Transformer and this just has to do with the um trainings that used for the tokenizer
11:07
and the tokenization itself so it will create a lot bigger tokens and a lot larger groups in English and it will
11:14
have a lot of little boundaries for all the other non-english text um so if we
11:19
translated this into English it would be significantly fewer tokens the final example I have here is
11:25
a little snippet of python for doing FS buuz and what I'd like you to notice is
11:31
look all these individual spaces are all separate tokens they are token
11:37
220 so uh 220 220 220 220 and then space
11:42
if is a single token and so what's going on here is that when the Transformer is going to consume or try to uh create
11:49
this text it needs to um handle all these spaces individually they all feed
11:54
in one by one into the entire Transformer in the sequence and so this is being extremely wasteful tokenizing
12:01
it in this way and so as a result of that gpt2 is not very good with python
12:07
and it's not anything to do with coding or the language model itself it's just that if he use a lot of indentation
12:12
using space in Python like we usually do uh you just end up bloating out all the
12:17
text and it's separated across way too much of the sequence and we are running out of the context length in the
12:22
sequence uh that's roughly speaking what's what's happening we're being way too wasteful we're taking up way too much token space now we can also scroll
12:29
up here and we can change the tokenizer so note here that gpt2 tokenizer creates a token count of 300 for this string
12:36
here we can change it to CL 100K base which is the GPT for tokenizer and we
12:41
see that the token count drops to 185 so for the exact same string we are now roughly having the number of tokens and
12:49
roughly speaking this is because uh the number of tokens in the GPT 4 tokenizer is roughly double that of the number of
12:56
tokens in the gpt2 tokenizer so we went went from roughly 50k to roughly 100K now you can imagine that this is a good
13:03
thing because the same text is now squished into half as many tokens so uh
13:10
this is a lot denser input to the Transformer and in the Transformer every
13:15
single token has a finite number of tokens before it that it's going to pay attention to and so what this is doing is we're roughly able to see twice as
13:23
much text as a context for what token to predict next uh because of this change
13:29
but of course just increasing the number of tokens is uh not strictly better infinitely uh because as you increase
13:35
the number of tokens now your embedding table is um sort of getting a lot larger and also at the output we are trying to
13:41
predict the next token and there's the soft Max there and that grows as well we're going to go into more detail later on this but there's some kind of a Sweet
13:48
Spot somewhere where you have a just right number of tokens in your vocabulary where everything is
13:53
appropriately dense and still fairly efficient now one thing I would like you to note specifically for the gp4
14:00
tokenizer is that the handling of the white space for python has improved a
14:05
lot you see that here these four spaces are represented as one single token for the three spaces here and then the token
14:13
SPF and here seven spaces were all grouped into a single token so we're
14:18
being a lot more efficient in how we represent Python and this was a deliberate Choice made by open aai when they designed the gp4 tokenizer and they
14:27
group a lot more space into a single character what this does is this densifies Python and therefore we can
14:35
attend to more code before it when we're trying to predict the next token in the sequence and so the Improvement in the
14:42
python coding ability from gbt2 to gp4 is not just a matter of the language
14:47
model and the architecture and the details of the optimization but a lot of the Improvement here is also coming from
14:52
the design of the tokenizer and how it groups characters into tokens okay so let's now start writing some code
strings in Python, Unicode code points
14:59
so remember what we want to do we want to take strings and feed them into language models for that we need to
15:05
somehow tokenize strings into some integers in some fixed vocabulary and
15:12
then we will use those integers to make a look up into a lookup table of vectors and feed those vectors into the
15:18
Transformer as an input now the reason this gets a little bit tricky of course is that we don't just want to support
15:24
the simple English alphabet we want to support different kinds of languages so this is anango in Korean which is hello
15:31
and we also want to support many kinds of special characters that we might find on the internet for example
15:37
Emoji so how do we feed this text into uh Transformers well how's the what is this
15:44
text anyway in Python so if you go to the documentation of a string in Python
15:49
you can see that strings are immutable sequences of Unicode code points okay what are Unicode code points
15:57
we can go to PDF so Unicode code points are defined by the Unicode Consortium as
16:04
part of the Unicode standard and what this is really is that it's just a definition of roughly 150,000 characters
16:11
right now and roughly speaking what they look like and what integers um represent
16:17
those characters so it says 150,000 characters across 161 scripts as of
16:22
right now so if you scroll down here you can see that the standard is very much alive the latest standard 15.1 in
16:28
September 2023 and basically this is just a way to
16:33
define lots of types of characters like for example all these
16:39
characters across different scripts so the way we can access the unic code code Point given Single Character is by using
16:45
the or function in Python so for example I can pass in Ord of H and I can see
16:51
that for the Single Character H the unic code code point is
16:56
104 okay um but this can be arbitr complicated so we can take for example
17:02
our Emoji here and we can see that the code point for this one is 128,000 or we can take
17:10
un and this is 50,000 now keep in mind you can't plug in strings here because
17:16
you uh this doesn't have a single code point it only takes a single uni code code Point character and tells you its
17:23
integer so in this way we can look up all the um characters of this
17:30
specific string and their code points so or of X forx in this string and we get
17:36
this encoding here now see here we've already turned the raw code points
17:42
already have integers so why can't we simply just use these integers and not have any tokenization at all why can't
17:48
we just use this natively as is and just use the code Point well one reason for that of course is that the vocabulary in
17:54
that case would be quite long so in this case for Unicode the this is a vocabulary of
17:59
150,000 different code points but more worryingly than that I think the Unicode
18:05
standard is very much alive and it keeps changing and so it's not kind of a stable representation necessarily that
18:11
we may want to use directly so for those reasons we need something a bit better so to find something better we turn to
Unicode byte encodings, ASCII, UTF-8, UTF-16, UTF-32
18:17
encodings so if we go to the Wikipedia page here we see that the Unicode consortion defines three types of
18:23
encodings utf8 UTF 16 and UTF 32 these encoding are the way by which we can
18:30
take Unicode text and translate it into binary data or by streams utf8 is by far
18:37
the most common uh so this is the utf8 page now this Wikipedia page is actually quite long but what's important for our
18:44
purposes is that utf8 takes every single Cod point and it translates it to a by
18:49
stream and this by stream is between one to four bytes so it's a variable length encoding so depending on the Unicode
18:56
Point according to the schema you're going to end up with between 1 to four bytes for each code point on top of that
19:03
there's utf8 uh utf16 and UTF 32 UTF 32 is nice because
19:08
it is fixed length instead of variable length but it has many other downsides as well so the full kind of spectrum of
19:17
pros and cons of all these different three encodings are beyond the scope of this video I just like to point out that
19:22
I enjoyed this block post and this block post at the end of it also has a number of references that can be quite useful
19:29
uh one of them is uh utf8 everywhere Manifesto um and this Manifesto
19:34
describes the reason why utf8 is significantly preferred and a lot nicer
19:39
than the other encodings and why it is used a lot more prominently um on the
19:45
internet one of the major advantages just just to give you a sense is that utf8 is the only one of these that is
19:52
backwards compatible to the much simpler asky encoding of text um but I'm not
19:57
going to go into the full detail in this video so suffice to say that we like the utf8 encoding and uh let's try to take
20:03
the string and see what we get if we encoded into utf8 the string class in Python actually
20:10
has do encode and you can give it the encoding which is say utf8 now we get out of this is not very nice because
20:17
this is the bytes is a bytes object and it's not very nice in the way that it's printed so I personally like to take it
20:25
through list because then we actually get the raw B of this uh encoding so this is the raw
20:32
byes that represent this string according to the utf8 en coding we can
20:38
also look at utf16 we get a slightly different by stream and we here we start
20:43
to see one of the disadvantages of utf16 you see how we have zero Z something Z something Z something we're starting to
20:49
get a sense that this is a bit of a wasteful encoding and indeed for simple asky characters or English characters
20:56
here uh we just have the structure of 0 something Z something and it's not exactly nice same for UTF 32 when we
21:04
expand this we can start to get a sense of the wastefulness of this encoding for our purposes you see a lot of zeros
21:10
followed by something and so uh this is not desirable so suffice it to say that we
21:17
would like to stick with utf8 for our purposes however if we just use utf8
21:23
naively these are by streams so that would imply a vocabulary length of only
21:29
256 possible tokens uh but this this vocabulary size is very very small what
21:35
this is going to do if we just were to use it naively is that all of our text would be stretched out over very very
21:41
long sequences of bytes and so um what what this does is that certainly
21:49
the embeding table is going to be tiny and the prediction at the top at the final layer is going to be very tiny but our sequences are very long and remember
21:56
that we have pretty finite um context length and the attention that we can support in a transformer for
22:02
computational reasons and so we only have as much context length but now we have very very long sequences and this
22:09
is just inefficient and it's not going to allow us to attend to sufficiently long text uh before us for the purposes
22:15
of the next token prediction task so we don't want to use the raw bytes of the
22:21
utf8 encoding we want to be able to support larger vocabulary size that we
22:26
can tune as a hyper but we want to stick with the utf8 encoding of these strings so what do we
22:33
do well the answer of course is we turn to the bite pair encoding algorithm which will allow us to compress these
22:39
bite sequences um to a variable amount so we'll get to that in a bit but I just
22:44
want to briefly speak to the fact that I would love nothing more than to be able to feed raw bite sequences into uh
daydreaming: deleting tokenization
22:52
language models in fact there's a paper about how this could potentially be done uh from Summer last last year now the
22:59
problem is you actually have to go in and you have to modify the Transformer architecture because as I mentioned
23:04
you're going to have a problem where the attention will start to become extremely expensive because the sequences are so
23:10
long and so in this paper they propose kind of a hierarchical structuring of
23:15
the Transformer that could allow you to just feed in raw bites and so at the end they say together these results
23:21
establish the viability of tokenization free autor regressive sequence modeling at scale so tokenization free would
23:27
indeed be amazing we would just feed B streams directly into our models but unfortunately I don't know that this has
23:34
really been proven out yet by sufficiently many groups and a sufficient scale uh but something like
23:39
this at one point would be amazing and I hope someone comes up with it but for now we have to come back and we can't
23:44
feed this directly into language models and we have to compress it using the B paare encoding algorithm so let's see
23:49
how that works so as I mentioned the B paare encoding algorithm is not all that complicated and the Wikipedia page is
Byte Pair Encoding (BPE) algorithm walkthrough
23:55
actually quite instructive as far as the basic idea goes go what we're doing is we have some kind of a input sequence uh
24:01
like for example here we have only four elements in our vocabulary a b c and d and we have a sequence of them so
24:08
instead of bytes let's say we just have four a vocab size of four the sequence is too long and we'd
24:14
like to compress it so what we do is that we iteratively find the pair of uh
24:20
tokens that occur the most frequently and then once we've
24:25
identified that pair we repl replace that pair with just a single new token
24:30
that we append to our vocabulary so for example here the bite pair AA occurs
24:36
most often so we mint a new token let's call it capital Z and we replace every
24:41
single occurrence of AA by Z so now we have two Z's here so here we took a
24:48
sequence of 11 characters with vocabulary size four and we've converted
24:54
it to a um sequence of only nine tokens but now with a vocabulary of five
25:00
because we have a fifth vocabulary element that we just created and it's Z standing for concatination of AA and we
25:07
can again repeat this process so we again look at the sequence and identify
25:12
the pair of tokens that are most frequent let's say that that is now AB
25:19
well we are going to replace AB with a new token that we meant call Y so y becomes ab and then every single
25:25
occurrence of ab is now replaced with y so we end up with this so now we only
25:31
have 1 2 3 4 5 6 seven characters in our sequence but we have not just um four
25:40
vocabulary elements or five but now we have six and for the final round we
25:45
again look through the sequence find that the phrase zy or the pair zy is most common and replace it one more time
25:53
with another um character let's say x so X is z y and we replace all curses of zy
25:59
and we get this following sequence so basically after we have gone through this process instead of having a um
26:08
sequence of 11 uh tokens with a vocabulary length of
26:13
four we now have a sequence of 1 2 3 four five tokens but our vocabulary
26:21
length now is seven and so in this way we can iteratively compress our sequence
26:27
I we Mint new tokens so in the in the exact same way we start we start out with bite sequences so we have 256
26:36
vocabulary size but we're now going to go through these and find the bite pairs that occur the most and we're going to
26:42
iteratively start minting new tokens appending them to our vocabulary and replacing things and in this way we're
26:48
going to end up with a compressed training data set and also an algorithm for taking any arbitrary sequence and
26:55
encoding it using this uh vocabul and also decoding it back to Strings so
27:01
let's now Implement all that so here's what I did I went to this block post that I enjoyed and I took the first
starting the implementation
27:07
paragraph and I copy pasted it here into text so this is one very long line
27:13
here now to get the tokens as I mentioned we just take our text and we encode it into utf8 the tokens here at
27:20
this point will be a raw bites single stream of bytes and just so that it's
27:25
easier to work with instead of just a bytes object I'm going to convert all those bytes to integers and then create
27:32
a list of it just so it's easier for us to manipulate and work with in Python and visualize and here I'm printing all
27:38
of that so this is the original um this is the original paragraph and its length
27:45
is 533 uh code points and then here are the bytes encoded in ut utf8 and we see that
27:53
this has a length of 616 bytes at this point or 616 tokens and the reason this
27:59
is more is because a lot of these simple asky characters or simple characters
28:04
they just become a single bite but a lot of these Unicode more complex characters become multiple bytes up to four and so
28:11
we are expanding that size so now what we'd like to do as a first step of the algorithm is we'd like
28:16
to iterate over here and find the pair of bites that occur most frequently
28:22
because we're then going to merge it so if you are working long on a notebook on a side then I encourage you to basically
28:27
click on the link find this notebook and try to write that function yourself otherwise I'm going to come here and
28:32
Implement first the function that finds the most common pair okay so here's what I came up with there are many different
counting consecutive pairs, finding most common pair
28:38
ways to implement this but I'm calling the function get stats it expects a list of integers I'm using a dictionary to
28:44
keep track of basically the counts and then this is a pythonic way to iterate consecutive elements of this list uh
28:51
which we covered in the previous video and then here I'm just keeping track of just incrementing by one um for all the
28:58
pairs so if I call this on all the tokens here then the stats comes out here so this is the dictionary the keys
29:06
are these topples of consecutive elements and this is the count so just
29:11
to uh print it in a slightly better way this is one way that I like to do that
29:17
where you it's a little bit compound here so you can pause if you like but we iterate all all the items the items
29:25
called on dictionary returns pairs of key value and instead I create a list
29:31
here of value key because if it's a value key list then I can call sort on
29:37
it and by default python will uh use the first element which in this case will be
29:43
value to sort by if it's given tles and then reverse so it's descending and
29:48
print that so basically it looks like 101 comma 32 was the most commonly
29:53
occurring consecutive pair and it occurred 20 times we can double check that that makes reasonable sense so if I
30:00
just search 10132 then you see that these are the 20 occurrences of that um pair and if we'd
30:10
like to take a look at what exactly that pair is we can use Char which is the opposite of or in Python so we give it a
30:17
um unic code Cod point so 101 and of 32 and we see that this is e and space so
30:25
basically there's a lot of E space here meaning that a lot of these words seem to end with e so here's eace as an
30:32
example so there's a lot of that going on here and this is the most common pair so now that we've identified the most
merging the most common pair
30:38
common pair we would like to iterate over this sequence we're going to Mint a new token with the ID of
30:44
256 right because these tokens currently go from Z to 255 so when we create a new
30:50
token it will have an ID of 256 and we're going to iterate over this
30:56
entire um list and every every time we see 101 comma 32 we're going to swap
31:02
that out for 256 so let's Implement that now and feel free to uh do that yourself as well so
31:09
first I commented uh this just so we don't pollute uh the notebook too much this is a nice way of in Python
31:17
obtaining the highest ranking pair so we're basically calling the Max on this
31:23
dictionary stats and this will return the maximum key and then the question is how does it
31:30
rank keys so you can provide it with a function that ranks keys and that
31:35
function is just stats. getet uh stats. getet would basically return the value
31:41
and so we're ranking by the value and getting the maximum key so it's 101 comma 32 as we saw now to actually merge
31:49
10132 um this is the function that I wrote but again there are many different versions of it so we're going to take a
31:55
list of IDs and the the pair that we want to replace and that pair will be replaced with the new index
32:02
idx so iterating through IDs if we find the pair swap it out for idx so we
32:08
create this new list and then we start at zero and then we go through this entire list sequentially from left to
32:14
right and here we are checking for equality at the current position with the
32:20
pair um so here we are checking that the pair matches now here is a bit of a tricky condition that you have to append
32:27
if you're trying to be careful and that is that um you don't want this here to be out of Bounds at the very last
32:33
position when you're on the rightmost element of this list otherwise this would uh give you an autof bounds error
32:39
so we have to make sure that we're not at the very very last element so uh this would be false for that so if we find a
32:46
match we append to this new list that replacement index and we increment the
32:53
position by two so we skip over that entire pair but otherwise if we we haven't found a matching pair we just
32:59
sort of copy over the um element at that position and increment by one then
33:05
return this so here's a very small toy example if we have a list 566 791 and we
33:10
want to replace the occurrences of 67 with 99 then calling this on that will
33:16
give us what we're asking for so here the 67 is replaced with
33:21
99 so now I'm going to uncomment this for our actual use case where we want to
33:27
take our tokens we want to take the top pair here and replace it with 256 to get
33:33
tokens to if we run this we get the following so recall that previously we
33:40
had a length 616 in this list and now we have a length 596 right so this
33:48
decreased by 20 which makes sense because there are 20 occurrences moreover we can try to find 256 here and
33:55
we see plenty of occurrences on off it and moreover just double check there should be no occurrence of 10132 so this
34:02
is the original array plenty of them and in the second array there are no occurrences of 1032 so we've
34:08
successfully merged this single pair and now we just uh iterate this so we are
34:13
going to go over the sequence again find the most common pair and replace it so let me now write a y Loop that uses
34:19
these functions to do this um sort of iteratively and how many times do we do it four well that's totally up to us as
34:26
a hyper parameter the more um steps we take the larger will be our vocabulary and the shorter
34:33
will be our sequence and there is some sweet spot that we usually find works the best in practice and so this is kind
34:39
of a hyperparameter and we tune it and we find good vocabulary sizes as an example gp4 currently uses roughly
34:46
100,000 tokens and um bpark that those are reasonable numbers currently instead
34:51
the are large language models so let me now write uh putting putting it all together and uh iterating these steps
training the tokenizer: adding the while loop, compression ratio
34:58
okay now before we dive into the Y loop I wanted to add one more cell here where I went to the block post and instead of
35:04
grabbing just the first paragraph or two I took the entire block post and I stretched it out in a single line and
35:10
basically just using longer text will allow us to have more representative statistics for the bite Pairs and we'll
35:16
just get a more sensible results out of it because it's longer text um so here
35:21
we have the raw text we encode it into bytes using the utf8 encoding
35:27
and then here as before we are just changing it into a list of integers in Python just so it's easier to work with
35:33
instead of the raw byes objects and then this is the code that I came up with uh
35:40
to actually do the merging in Loop these two functions here are identical to what
35:45
we had above I only included them here just so that you have the point of reference here so uh these two are
35:53
identical and then this is the new code that I added so the first first thing we want to do is we want to decide on the
35:58
final vocabulary size that we want our tokenizer to have and as I mentioned this is a hyper parameter and you set it
36:04
in some way depending on your best performance so let's say for us we're going to use 276 because that way we're
36:10
going to be doing exactly 20 merges and uh 20 merges because we already have
36:16
256 tokens for the raw bytes and to reach 276 we have to do 20 merges uh to
36:23
add 20 new tokens here uh this is uh one way in Python to just create a copy of a list
36:31
so I'm taking the tokens list and by wrapping it in a list python will construct a new list of all the
36:37
individual elements so this is just a copy operation then here I'm creating a merges uh dictionary so this merges
36:44
dictionary is going to maintain basically the child one child two mapping to a new uh token and so what
36:52
we're going to be building up here is a binary tree of merges but actually it's not exactly a tree because a tree would
36:59
have a single root node with a bunch of leaves for us we're starting with the leaves on the bottom which are the
37:05
individual bites those are the starting 256 tokens and then we're starting to like merge two of them at a time and so
37:11
it's not a tree it's more like a forest um uh as we merge these elements
37:18
so for 20 merges we're going to find the most commonly occurring pair we're going
37:25
to Mint a new token integer for it so I here will start at zero so we'll going to start at 256 we're going to print
37:32
that we're merging it and we're going to replace all of the occurrences of that pair with the new new lied token and
37:39
we're going to record that this pair of integers merged into this new
37:45
integer so running this gives us the following
37:51
output so we did 20 merges and for example the first merge was exactly as
37:56
before the 10132 um tokens merging into a new token 2556 now keep in mind that the
38:04
individual uh tokens 101 and 32 can still occur in the sequence after merging it's only when they occur
38:10
exactly consecutively that that becomes 256 now um and in particular the other thing
38:16
to notice here is that the token 256 which is the newly minted token is also eligible for merging so here on the
38:23
bottom the 20th merge was a merge of 25 and 259 becoming
38:28
275 so every time we replace these tokens they become eligible for merging in the next round of data ration so
38:35
that's why we're building up a small sort of binary Forest instead of a single individual tree one thing we can take a look at as
38:42
well is we can take a look at the compression ratio that we've achieved so in particular we started off with this
38:48
tokens list um so we started off with 24,000 bytes and after merging 20 times
38:56
uh we now have only 19,000 um tokens and so therefore the
39:01
compression ratio simply just dividing the two is roughly 1.27 so that's the amount of compression we were able to
39:07
achieve of this text with only 20 merges um and of course the more
39:13
vocabulary elements you add uh the greater the compression ratio here would
39:19
be finally so that's kind of like um the training of the tokenizer if you will
tokenizer/LLM diagram: it is a completely separate stage
39:25
now 1 Point I wanted to make is that and maybe this is a diagram that can help um
39:31
kind of illustrate is that tokenizer is a completely separate object from the large language model itself so
39:37
everything in this lecture we're not really touching the llm itself uh we're just training the tokenizer this is a completely separate pre-processing stage
39:43
usually so the tokenizer will have its own training set just like a large language model has a potentially
39:49
different training set so the tokenizer has a training set of documents on which you're going to train the tokenizer and then and um we're
39:57
performing The Bite pair encoding algorithm as we saw above to train the vocabulary of this tokenizer so it has its own training set
40:04
it is a pre-processing stage that you would run a single time in the beginning um and the tokenizer is trained using
40:11
bipar coding algorithm once you have the tokenizer once it's trained and you have the vocabulary and you have the merges
40:19
uh we can do both encoding and decoding so these two arrows here so the
40:24
tokenizer is a translation layer between raw text which is as we saw the sequence
40:30
of Unicode code points it can take raw text and turn it into a token sequence
40:35
and vice versa it can take a token sequence and translate it back into raw
40:40
text so now that we have trained uh tokenizer and we have these merges we
40:45
are going to turn to how we can do the encoding and the decoding step if you give me text here are the tokens and
40:51
vice versa if you give me tokens here's the text once we have that we can translate between these two Realms and
40:57
then the language model is going to be trained as a step two afterwards and typically in a in a sort of a
41:03
state-of-the-art application you might take all of your training data for the language model and you might run it through the tokenizer and sort of
41:10
translate everything into a massive token sequence and then you can throw away the raw text you're just left with
41:15
the tokens themselves and those are stored on disk and that is what the large language model is actually reading
41:21
when it's training on them so this one approach that you can take as a single massive pre-processing step a
41:26
stage um so yeah basically I think the most important thing I want to get across is that this is completely
41:32
separate stage it usually has its own entire uh training set you may want to have those training sets be different
41:38
between the tokenizer and the logge language model so for example when you're training the tokenizer as I mentioned we don't just care about the
41:45
performance of English text we care about uh multi many different languages and we also care about code or not code
41:51
so you may want to look into different kinds of mixtures of different kinds of languages and different amounts of code
41:57
and things like that because the amount of different language that you have in your tokenizer training set will
42:03
determine how many merges of it there will be and therefore that determines the density with which uh this type of
42:11
data is um sort of has in the token space and so roughly speaking
42:17
intuitively if you add some amount of data like say you have a ton of Japanese data in your uh tokenizer training set
42:24
then that means that more Japanese tokens will get merged and therefore Japanese will have shorter sequences uh and that's going to be
42:30
beneficial for the large language model which has a finite context length on which it can work on in in the token
42:36
space uh so hopefully that makes sense so we're now going to turn to encoding and decoding now that we have trained a
42:43
tokenizer so we have our merges and now how do we do encoding and decoding okay
decoding tokens to strings
42:48
so let's begin with decoding which is this Arrow over here so given a token sequence let's go through the tokenizer
42:54
to get back a python string object so the raw text so this is the function that we' like to implement um we're
43:01
given the list of integers and we want to return a python string if you'd like uh try to implement this function yourself it's a fun exercise otherwise
43:08
I'm going to start uh pasting in my own solution so there are many different ways to do it um here's one way I will
43:16
create an uh kind of pre-processing variable that I will call vocab and vocab is a mapping or a
43:24
dictionary in Python for from the token uh ID to the bytes object for that token
43:31
so we begin with the raw bytes for tokens from 0 to 255 and then we go in
43:36
order of all the merges and we sort of uh populate this vocab list by doing an
43:42
addition here so this is the basically the bytes representation of the first
43:47
child followed by the second one and remember these are bytes objects so this addition here is an addition of two
43:54
bytes objects just concatenation so that's what we get here one tricky thing to be careful with
44:01
by the way is that I'm iterating a dictionary in Python using a DOT items and uh it really matters that this runs
44:08
in the order in which we inserted items into the merous dictionary luckily starting with python 3.7 this is
44:15
guaranteed to be the case but before python 3.7 this iteration may have been out of order with respect to how we
44:20
inserted elements into merges and this may not have worked but we are using an um modern python so we're okay and then
44:28
here uh given the IDS the first thing we're going to do is get the
44:35
tokens so the way I implemented this here is I'm taking I'm iterating over all the IDS I'm using vocap to look up
44:41
their bytes and then here this is one way in Python to concatenate all these bytes together to create our tokens and
44:49
then these tokens here at this point are raw bytes so I have to decode using UTF
44:56
F now back into python strings so previously we called that encode on a
45:01
string object to get the bytes and now we're doing it Opposite we're taking the bytes and calling a decode on the bytes
45:07
object to get a string in Python and then we can return
45:13
text so um this is how we can do it now this actually has a um issue um in the
45:20
way I implemented it and this could actually throw an error so try to think figure out why this code could actually
45:26
result in an error if we plug in um uh some sequence of IDs that is
45:32
unlucky so let me demonstrate the issue when I try to decode just something like 97 I am going to get letter A here back
45:41
so nothing too crazy happening but when I try to decode 128 as a single element
45:48
the token 128 is what in string or in Python object uni Cod decoder utfa can't
45:55
Decode by um 0x8 which is this in HEX in position zero invalid start bite what
46:01
does that mean well to understand what this means we have to go back to our utf8 page uh that I briefly showed
46:07
earlier and this is Wikipedia utf8 and basically there's a specific schema that
46:13
utfa bytes take so in particular if you have a multi-te object for some of the
46:19
Unicode characters they have to have this special sort of envelope in how the encoding works and so what's happening
46:26
here is that invalid start pite that's because 128 the binary representation of it is
46:33
one followed by all zeros so we have one and then all zero and we see here that
46:39
that doesn't conform to the format because one followed by all zero just doesn't fit any of these rules so to
46:44
speak so it's an invalid start bite which is byte one this one must have a
46:50
one following it and then a zero following it and then the content of your uni codee in x here so basically we
46:57
don't um exactly follow the utf8 standard and this cannot be decoded and so the way to fix this um is to
47:06
use this errors equals in bytes. decode function of python and by default errors
47:13
is strict so we will throw an error if um it's not valid utf8 bytes encoding
47:20
but there are many different things that you could put here on error handling this is the full list of all the errors
47:25
that you can use and in particular instead of strict let's change it to replace and that will replace uh with
47:32
this special marker this replacement character so errors equals replace and
47:40
now we just get that character back so basically not every single by
47:46
sequence is valid utf8 and if it happens that your large language model for example predicts your
47:53
tokens in a bad manner then they might not fall into valid utf8 and then we
48:00
won't be able to decode them so the standard practice is to basically uh use
48:05
errors equals replace and this is what you will also find in the openai um code that they released as well but basically
48:12
whenever you see um this kind of a character in your output in that case uh something went wrong and the LM output
48:18
not was not valid uh sort of sequence of tokens okay and now we're going to go
encoding strings to tokens
48:23
the other way so we are going to implement this Arrow right here where we are going to be given a string and we want to
48:29
encode it into tokens so this is the signature of the function that we're interested in and um
48:36
this should basically print a list of integers of the tokens so again uh try to maybe implement this yourself if
48:43
you'd like a fun exercise uh and pause here otherwise I'm going to start putting in my solution so again there are many ways to
48:50
do this so um this is one of the ways that sort of I came came up with so the
48:57
first thing we're going to do is we are going to uh take our text encode it into utf8
49:03
to get the raw bytes and then as before we're going to call list on the bytes object to get a list of integers of
49:10
those bytes so those are the starting tokens those are the raw bytes of our sequence but now of course according to
49:16
the merges dictionary above and recall this was the merges some of the bytes may be merged
49:23
according to this lookup in addition to that remember that the merges was built from top to bottom and this is sort of
49:29
the order in which we inserted stuff into merges and so we prefer to do all these merges in the beginning before we
49:36
do these merges later because um for example this merge over here relies on the 256 which got merged here so we have
49:44
to go in the order from top to bottom sort of if we are going to be merging anything now we expect to be doing a few
49:51
merges so we're going to be doing W true um and now we want to find a pair
49:58
of byes that is consecutive that we are allowed to merge according to this in
50:03
order to reuse some of the functionality that we've already written I'm going to reuse the function uh get
50:09
stats so recall that get stats uh will give us the we'll basically count up how
50:14
many times every single pair occurs in our sequence of tokens and return that as a dictionary and the dictionary was a
50:22
mapping from all the different uh by pairs to the number of times that they
50:27
occur right um at this point we don't actually care how many times they occur in the sequence we only care what the
50:34
raw pairs are in that sequence and so I'm only going to be using basically the keys of the dictionary I only care about
50:40
the set of possible merge candidates if that makes sense now we want to identify the pair
50:46
that we're going to be merging at this stage of the loop so what do we want we want to find the pair or like the a key
50:53
inside stats that has the lowest index in the merges uh dictionary because we
50:59
want to do all the early merges before we work our way to the late merges so again there are many different
51:05
ways to implement this but I'm going to do something a little bit fancy
51:11
here so I'm going to be using the Min over an iterator in Python when you call
51:16
Min on an iterator and stats here as a dictionary we're going to be iterating the keys of this dictionary in Python so
51:24
we're looking at all the pairs inside stats um which are all the consecutive
51:29
Pairs and we're going to be taking the consecutive pair inside tokens that has
51:34
the minimum what the Min takes a key which gives us the function that is
51:40
going to return a value over which we're going to do the Min and the one we care about is we're we care about taking
51:46
merges and basically getting um that pairs
51:52
index so basically for any pair inside stats we are going to be looking into
51:59
merges at what index it has and we want to get the pair with the Min number so
52:05
as an example if there's a pair 101 and 32 we definitely want to get that pair uh we want to identify it here and
52:11
return it and pair would become 10132 if it occurs and the reason that I'm putting a
52:17
float INF here as a fall back is that in the get function when we call uh when we
52:24
basically consider a pair that doesn't occur in the merges then that pair is not eligible to be merged right so if in
52:31
the token sequence there's some pair that is not a merging pair it cannot be merged then uh it doesn't actually occur
52:38
here and it doesn't have an index and uh it cannot be merged which we will denote as float INF and the reason Infinity is
52:45
nice here is because for sure we're guaranteed that it's not going to participate in the list of candidates when we do the men so uh so this is one
52:53
way to do it so B basically long story short this Returns the most eligible merging candidate pair uh that occurs in
53:01
the tokens now one thing to be careful with here is this uh function here might
53:07
fail in the following way if there's nothing to merge then uh uh then there's
53:13
nothing in merges um that satisfi that is satisfied anymore there's nothing to merge everything just returns float imps
53:21
and then the pair I think will just become the very first element of stats
53:26
um but this pair is not actually a mergeable pair it just becomes the first pair inside stats arbitrarily because
53:33
all of these pairs evaluate to float in for the merging Criterion so basically
53:38
it could be that this this doesn't look succeed because there's no more merging pairs so if this pair is not in merges
53:44
that was returned then this is a signal for us that actually there was nothing to merge no single pair can be merged
53:50
anymore in that case we will break out um nothing else can be
53:57
merged you may come up with a different implementation by the way this is kind of like really trying hard in
54:03
Python um but really we're just trying to find a pair that can be merged with the lowest index
54:09
here now if we did find a pair that is inside merges with the lowest index then
54:16
we can merge it so we're going to look into the merger
54:22
dictionary for that pair to look up the index and we're going to now merge that
54:27
into that index so we're going to do tokens equals and we're going to replace the original tokens we're going
54:34
to be replacing the pair pair and we're going to be replacing it with index idx and this returns a new list of tokens
54:41
where every occurrence of pair is replaced with idx so we're doing a merge and we're going to be continuing this
54:47
until eventually nothing can be merged we'll come out here and we'll break out and here we just return
54:53
tokens and so that that's the implementation I think so hopefully this runs okay cool um yeah and this looks uh
55:02
reasonable so for example 32 is a space in asky so that's here um so this looks
55:09
like it worked great okay so let's wrap up this section of the video at least I wanted to point out that this is not
55:14
quite the right implementation just yet because we are leaving out a special case so in particular if uh we try to do
55:20
this this would give us an error and the issue is that um if we only have a single character or an empty string then
55:28
stats is empty and that causes an issue inside Min so one way to fight this is if L of tokens is at least two because
55:36
if it's less than two it's just a single token or no tokens then let's just uh there's nothing to merge so we just
55:41
return so that would fix uh that case Okay and then second I have a few
55:48
test cases here for us as well so first let's make sure uh about or let's note
55:53
the following if we take a string and we try to encode it and then decode it back
55:58
you'd expect to get the same string back right is that true for all
56:04
strings so I think uh so here it is the case and I think in general this is probably the case um but notice that
56:12
going backwards is not is not you're not going to have an identity going backwards because as I mentioned us not
56:19
all token sequences are valid utf8 uh sort of by streams and so so therefore
56:25
you're some of them can't even be decodable um so this only goes in One
56:30
Direction but for that one direction we can check uh here if we take the training text which is the text that we
56:36
train to tokenizer around we can make sure that when we encode and decode we get the same thing back which is true
56:41
and here I took some validation data so I went to I think this web page and I grabbed some text so this is text that
56:47
the tokenizer has not seen and we can make sure that this also works um okay so that gives us some confidence that
56:53
this was correctly implemented so those are the basics of the bite pair encoding algorithm we saw how we can uh
57:00
take some training set train a tokenizer the parameters of this tokenizer really are just this dictionary of merges and
57:08
that basically creates the little binary Forest on top of raw bites once we have this the merges table
57:14
we can both encode and decode between raw text and token sequences so that's the the simplest setting of The
57:21
tokenizer what we're going to do now though is we're going to look at some of the St the art lar language models and
57:26
the kinds of tokenizers that they use and we're going to see that this picture complexifies very quickly so we're going
57:31
to go through the details of this comp complexification one at a time so let's
regex patterns to force splits across categories
57:37
kick things off by looking at the GPD Series so in particular I have the gpt2 paper here um and this paper is from
57:44
2019 or so so 5 years ago and let's scroll down to input representation this
57:51
is where they talk about the tokenizer that they're using for gpd2 now this is all fairly readable so I encourage you
57:57
to pause and um read this yourself but this is where they motivate the use of the bite pair encoding algorithm on the
58:04
bite level representation of utf8 encoding so this is where they motivate it and they talk about the vocabulary
58:11
sizes and everything now everything here is exactly as we've covered it so far but things start to depart around here
58:18
so what they mention is that they don't just apply the naive algorithm as we have done it and in particular here's a
58:25
example suppose that you have common words like dog what will happen is that dog of course occurs very frequently in
58:31
the text and it occurs right next to all kinds of punctuation as an example so doc dot dog exclamation mark dog
58:39
question mark Etc and naively you might imagine that the BP algorithm could merge these to be single tokens and then
58:45
you end up with lots of tokens that are just like dog with a slightly different punctuation and so it feels like you're
58:50
clustering things that shouldn't be clustered you're combining kind of semantics with uation and this uh feels suboptimal and
58:58
indeed they also say that this is suboptimal according to some of the experiments so what they want to do is
59:04
they want to top down in a manual way enforce that some types of um characters
59:09
should never be merged together um so they want to enforce these merging rules
59:14
on top of the bite PA encoding algorithm so let's take a look um at their code
59:19
and see how they actually enforce this and what kinds of mergy they actually do perform so I have to to tab open here
59:25
for gpt2 under open AI on GitHub and when we go to Source there is an encoder thatp now I
59:34
don't personally love that they call it encoder dopy because this is the tokenizer and the tokenizer can do both
59:39
encode and decode uh so it feels kind of awkward to me that it's called encoder but that is the tokenizer and there's a
59:45
lot going on here and we're going to step through it in detail at one point for now I just want to focus on this
59:51
part here the create a rigix pattern here that looks very complicated and we're going to go through it in a bit uh
59:58
but this is the core part that allows them to enforce rules uh for what parts
1:00:04
of the text Will Never Be merged for sure now notice that re. compile here is a little bit misleading because we're
1:00:10
not just doing import re which is the python re module we're doing import reex as re and reex is a python package that
1:00:17
you can install P install r x and it's basically an extension of re so it's a bit more powerful
1:00:23
re um so let's take a look at this pattern and
1:00:28
what it's doing and why this is actually doing the separation that they are looking for okay so I've copy pasted the
1:00:34
pattern here to our jupit notebook where we left off and let's take this pattern for a spin so in the exact same way that
1:00:42
their code does we're going to call an re. findall for this pattern on any
1:00:47
arbitrary string that we are interested so this is the string that we want to encode into tokens um to feed into n llm
1:00:55
like gpt2 so what exactly is this doing well re. findall will take this pattern
1:01:01
and try to match it against a string um the way this works is that you
1:01:06
are going from left to right in the string and you're trying to match the pattern and R.F find all will get all
1:01:13
the occurrences and organize them into a list now when you look at the um when
1:01:19
you look at this pattern first of all notice that this is a raw string um and then these are three double quotes just
1:01:26
to start the string so really the string itself this is the pattern itself right and notice that it's made up of a
1:01:34
lot of ores so see these vertical bars those are ores in reg X and so you go
1:01:40
from left to right in this pattern and try to match it against the string wherever you are so we have hello and
1:01:46
we're going to try to match it well it's not apostrophe s it's not apostrophe t or any of these but it is an optional
1:01:53
space followed by- P of uh sorry SL P of L one or more times what is/ P of L it
1:02:02
is coming to some documentation that I found um there might be other sources as
1:02:08
well uh SLP is a letter any kind of letter from any language and hello is
1:02:15
made up of letters h e l Etc so optional space followed by a bunch of letters one
1:02:21
or more letters is going to match hello but then the match ends because a white
1:02:27
space is not a letter so from there on begins a new sort of attempt to match
1:02:33
against the string again and starting in here we're going to skip over all of these again until we get to the exact
1:02:40
same Point again and we see that there's an optional space this is the optional space followed by a bunch of letters one
1:02:46
or more of them and so that matches so when we run this we get a list of two
1:02:52
elements hello and then space world so how are you if we add more letters we
1:02:58
would just get them like this now what is this doing and why is this important we are taking our string and instead of
1:03:05
directly encoding it um for tokenization we are first splitting it
1:03:11
up and when you actually step through the code and we'll do that in a bit more detail what really is doing on a high
1:03:17
level is that it first splits your text into a list of texts just like this one
1:03:24
and all these elements of this list are processed independently by the tokenizer and all of the results of that
1:03:30
processing are simply concatenated so hello world oh I I
1:03:35
missed how hello world how are you we have five elements of list all of these
1:03:41
will independent independently go from text to a token
1:03:47
sequence and then that token sequence is going to be concatenated it's all going to be joined up and roughly speaking
1:03:54
what that does is you're only ever finding merges between the elements of this list so you can only ever consider
1:04:00
merges within every one of these elements in individually and um after you've done
1:04:06
all the possible merging for all of these elements individually the results of all that will be joined um by
1:04:13
concatenation and so you are basically what what you're doing effectively is you are never going to be merging this e
1:04:21
with this space because they are now parts of the separate elements of this list and so you are saying we are never
1:04:27
going to merge eace um because we're breaking it up in this way so basically using this regx
1:04:35
pattern to Chunk Up the text is just one way of enforcing that some merges are
1:04:41
not to happen and we're going to go into more of this text and we'll see that what this is trying to do on a high level is we're trying to not merge
1:04:48
across letters across numbers across punctuation and so on so let's see in
1:04:53
more detail how that works so let's continue now we have/ P ofn if you go to the documentation SLP of n is any kind
1:05:01
of numeric character in any script so it's numbers so we have an optional space followed by numbers and those
1:05:08
would be separated out so letters and numbers are being separated so if I do Hello World 123 how are you then world
1:05:15
will stop matching here because one is not a letter anymore but one is a number so this group will match for that and
1:05:22
we'll get it as a separate entity uh let's see how these apostrophes work
1:05:28
so here if we have um uh Slash V or I mean apostrophe V as
1:05:35
an example then apostrophe here is not a letter or a number so hello will stop matching and
1:05:42
then we will exactly match this with that so that will come out as a separate
1:05:48
thing so why are they doing the apostrophes here honestly I think that these are just like very common
1:05:53
apostrophes p uh that are used um typically I don't love that they've done
1:05:59
this because uh let me show you what happens when you have uh some Unicode
1:06:05
apostrophes like for example you can have if you have house then this will be
1:06:10
separated out because of this matching but if you use the Unicode apostrophe like
1:06:16
this then suddenly this does not work and so this apostrophe will actually
1:06:21
become its own thing now and so so um it's basically hardcoded for this specific kind of apostrophe and uh
1:06:29
otherwise they become completely separate tokens in addition to this you can go to the gpt2 docs and here when
1:06:38
they Define the pattern they say should have added re. ignore case so BP merges can happen for capitalized versions of
1:06:44
contractions so what they're pointing out is that you see how this is apostrophe and then lowercase letters
1:06:50
well because they didn't do re. ignore case then then um these rules will not
1:06:56
separate out the apostrophes if it's uppercase so house would be like this but if I did
1:07:06
house if I'm uppercase then notice suddenly the apostrophe comes by
1:07:12
itself so the tokenization will work differently in uppercase and lower case
1:07:17
inconsistently separating out these apostrophes so it feels extremely gnarly and slightly gross um but that's that's
1:07:24
how that works okay so let's come back after trying to match a bunch of apostrophe Expressions by the way the
1:07:30
other issue here is that these are quite language specific probably so I don't know that all the languages for example
1:07:35
use or don't use apostrophes but that would be inconsistently tokenized as a result then we try to match letters then
1:07:42
we try to match numbers and then if that doesn't work we fall back to here and
1:07:47
what this is saying is again optional space followed by something that is not a letter number or a space in one or
1:07:53
more of that so what this is doing effectively is this is trying to match punctuation roughly speaking not letters
1:07:59
and not numbers so this group will try to trigger for that so if I do something like this then these parts here are not
1:08:08
letters or numbers but they will actually they are uh they will actually get caught here and so they become its
1:08:14
own group so we've separated out the punctuation and finally this um this is
1:08:20
also a little bit confusing so this is matching white space but this is using a
1:08:25
negative look ahead assertion in regex so what this is doing is it's matching
1:08:30
wh space up to but not including the last Whit space character why is this important um this
1:08:37
is pretty subtle I think so you see how the white space is always included at the beginning of the word so um space r
1:08:45
space u Etc suppose we have a lot of spaces here what's going to happen here is that
1:08:52
these spaces up to not including the last character will get caught by this
1:08:57
and what that will do is it will separate out the spaces up to but not including the last character so that the
1:09:03
last character can come here and join with the um space you and the reason
1:09:09
that's nice is because space you is the common token so if I didn't have these Extra Spaces here you would just have
1:09:15
space you and if I add tokens if I add spaces we still have a space view but
1:09:20
now we have all this extra white space so basically the GB to tokenizer really likes to have a space letters or numbers
1:09:27
um and it it preens these spaces and this is just something that it is consistent about so that's what that is
1:09:33
for and then finally we have all the the last fallback is um whites space characters uh so um that would be
1:09:42
just um if that doesn't get caught then this thing will catch any trailing
1:09:48
spaces and so on I wanted to show one more real world example here so if we have this string which is a piece of
1:09:54
python code and then we try to split it up then this is the kind of output we get so you'll notice that the list has
1:10:00
many elements here and that's because we are splitting up fairly often uh every time sort of a category
1:10:07
changes um so there will never be any merges Within These elements and um that's what you are
1:10:13
seeing here now you might think that in order to train the tokenizer uh open AI has used this to
1:10:21
split up text into chunks and then run just a BP algorithm within all the chunks but that is not exactly what
1:10:27
happened and the reason is the following notice that we have the spaces here uh
1:10:33
those Spaces end up being entire elements but these spaces never actually
1:10:38
end up being merged by by open Ai and the way you can tell is that if you copy paste the exact same chunk here into Tik
1:10:44
token U Tik tokenizer you see that all the spaces are kept independent and
1:10:49
they're all token 220 so I think opena at some point Point en Force some rule that these spaces
1:10:56
would never be merged and so um there's some additional rules on top of just
1:11:01
chunking and bpe that open ey is not uh clear about now the training code for
1:11:06
the gpt2 tokenizer was never released so all we have is uh the code that I've already shown you but this code here
1:11:13
that they've released is only the inference code for the tokens so this is not the training code you can't give it
1:11:19
a piece of text and training tokenizer this is just the inference code which Tak takes the merges that we have up
1:11:25
above and applies them to a new piece of text and so we don't know exactly how opening ey trained um train the
1:11:32
tokenizer but it wasn't as simple as chunk it up and BP it uh whatever it was
tiktoken library intro, differences between GPT-2/GPT-4 regex
1:11:38
next I wanted to introduce you to the Tik token library from openai which is the official library for tokenization
1:11:44
from openai so this is Tik token bip install P to Tik token and then um you
1:11:51
can do the tokenization in inference this is again not training code this is only inference code for
1:11:57
tokenization um I wanted to show you how you would use it quite simple and running this just gives us the gpt2
1:12:04
tokens or the GPT 4 tokens so this is the tokenizer use for GPT 4 and so in
1:12:09
particular we see that the Whit space in gpt2 remains unmerged but in GPT 4 uh these Whit spaces merge as we also saw
1:12:17
in this one where here they're all unmerged but if we go down to GPT 4 uh
1:12:22
they become merged um now in the
1:12:27
gp4 uh tokenizer they changed the regular expression that they use to
1:12:33
Chunk Up text so the way to see this is that if you come to your the Tik token uh library and then you go to this file
1:12:41
Tik token X openi public this is where sort of like the definition of all these different tokenizers that openi
1:12:46
maintains is and so uh necessarily to do the inference they had to publish some of the details about the strings
1:12:53
so this is the string that we already saw for gpt2 it is slightly different but it is actually equivalent uh to what
1:13:00
we discussed here so this pattern that we discussed is equivalent to this pattern this one just executes a little
1:13:07
bit faster so here you see a little bit of a slightly different definition but otherwise it's the same we're going to
1:13:12
go into special tokens in a bit and then if you scroll down to CL 100k this is
1:13:18
the GPT 4 tokenizer you see that the pattern has changed um and this is kind
1:13:23
of like the main the major change in addition to a bunch of other special tokens which I'll go into in a bit again
1:13:30
now some I'm not going to actually go into the full detail of the pattern change because honestly this is my
1:13:35
numbing uh I would just advise that you pull out chat GPT and the regex documentation and just step through it
1:13:42
but really the major changes are number one you see this eye here that means
1:13:48
that the um case sensitivity this is case insensitive match and so the
1:13:53
comment that we saw earlier on oh we should have used re. uppercase uh basically we're now going to be matching
1:14:01
these apostrophe s apostrophe D apostrophe M Etc uh we're going to be
1:14:06
matching them both in lowercase and in uppercase so that's fixed there's a bunch of different like handling of the
1:14:12
whites space that I'm not going to go into the full details of and then one more thing here is you will notice that
1:14:18
when they match the numbers they only match one to three numbers so so they will never merge
1:14:26
numbers that are in low in more than three digits only up to three digits of
1:14:31
numbers will ever be merged and uh that's one change that they made as well
1:14:36
to prevent uh tokens that are very very long number sequences uh but again we don't really
1:14:42
know why they do any of this stuff uh because none of this is documented and uh it's just we just get the pattern so
1:14:49
um yeah it is what it is but those are some of the changes that gp4 has made and of course the vocabulary size went
1:14:56
from roughly 50k to roughly 100K the next thing I would like to do very briefly is to take you through the
GPT-2 encoder.py released by OpenAI walkthrough
1:15:02
gpt2 encoder dopy that openi has released uh this is the file that I
1:15:07
already mentioned to you briefly now this file is uh fairly short and should
1:15:12
be relatively understandable to you at this point um starting at the bottom
1:15:17
here they are loading two files encoder Json and vocab bpe and they do some
1:15:24
light processing on it and then they call this encoder object which is the tokenizer now if you'd like to inspect
1:15:30
these two files which together constitute their saved tokenizer then you can do that with a piece of code
1:15:36
like this um this is where you can download these two files and you can inspect them if you'd like and what you will find is
1:15:42
that this encoder as they call it in their code is exactly equivalent to our vocab so remember here where we have
1:15:51
this vocab object which allowed us us to decode very efficiently and basically it took us from the integer to the byes uh
1:16:00
for that integer so our vocab is exactly their encoder and then their vocab bpe
1:16:07
confusingly is actually are merges so their BP merges which is based on the
1:16:14
data inside vocab bpe ends up being equivalent to our merges so uh basically
1:16:20
they are saving and loading the two uh variables that for us are also critical
1:16:26
the merges variable and the vocab variable using just these two variables you can represent a tokenizer and you
1:16:32
can both do encoding and decoding once you've trained this tokenizer now the only thing that um is
1:16:40
actually slightly confusing inside what opening ey does here is that in addition to this encoder and a decoder they also
1:16:46
have something called a bite encoder and a bite decoder and this is actually unfortunately just
1:16:53
kind of a spirous implementation detail and isn't actually deep or interesting in any way so I'm going to skip the
1:16:59
discussion of it but what opening ey does here for reasons that I don't fully understand is that not only have they
1:17:05
this tokenizer which can encode and decode but they have a whole separate layer here in addition that is used serially with the tokenizer and so you
1:17:12
first do um bite encode and then encode and then you do decode and then bite
1:17:17
decode so that's the loop and they are just stacked serial on top of each other
1:17:22
and and it's not that interesting so I won't cover it and you can step through it if you'd like otherwise this file if
1:17:28
you ignore the bite encoder and the bite decoder will be algorithmically very familiar with you and the meat of it
1:17:33
here is the what they call bpe function and you should recognize this Loop here
1:17:39
which is very similar to our own y Loop where they're trying to identify the Byram uh a pair that they should be
1:17:46
merging next and then here just like we had they have a for Loop trying to merge this pair uh so they will go over all of
1:17:53
the sequence and they will merge the pair whenever they find it and they keep repeating that until they run out of
1:17:59
possible merges in the in the text so that's the meat of this file and uh there's an encode and a decode function
1:18:06
just like we have implemented it so long story short what I want you to take away at this point is that unfortunately it's
1:18:11
a little bit of a messy code that they have but algorithmically it is identical to what we've built up above and what
1:18:17
we've built up above if you understand it is algorithmically what is necessary to actually build a BP to organizer
1:18:23
train it and then both encode and decode the next topic I would like to turn to is that of special tokens so in addition
special tokens, tiktoken handling of, GPT-2/GPT-4 differences
1:18:30
to tokens that are coming from you know raw bytes and the BP merges we can insert all kinds of tokens that we are
1:18:36
going to use to delimit different parts of the data or introduced to create a special structure of the token streams
1:18:44
so in uh if you look at this encoder object from open AIS gpd2 right here we
1:18:50
mentioned this is very similar to our vocab you'll notice that the length of this is
1:18:58
50257 and as I mentioned it's mapping uh and it's inverted from the mapping of our vocab our vocab goes from integer to
1:19:06
string and they go the other way around for no amazing reason um but the thing
1:19:11
to note here is that this the mapping table here is 50257 where does that number come from
1:19:18
where what are the tokens as I mentioned there are 256 raw bite token
1:19:24
tokens and then opena actually did 50,000 merges so those become the other tokens
1:19:32
but this would have been 50256 so what is the 57th token and
1:19:37
there is basically one special token and that one special token you can
1:19:43
see is called end of text so this is a special token and it's the very last
1:19:49
token and this token is used to delimit documents ments in the training set so
1:19:55
when we're creating the training data we have all these documents and we tokenize them and we get a stream of tokens those
1:20:01
tokens only range from Z to 50256 and then in between those
1:20:07
documents we put special end of text token and we insert that token in
1:20:12
between documents and we are using this as a signal to the language model that
1:20:18
the document has ended and what follows is going to be unrelated to the document previously that said the language model
1:20:25
has to learn this from data it it needs to learn that this token usually means that it should wipe its sort of memory
1:20:31
of what came before and what came before this token is not actually informative to what comes next but we are expecting
1:20:37
the language model to just like learn this but we're giving it the Special sort of the limiter of these documents
1:20:44
we can go here to Tech tokenizer and um this the gpt2 tokenizer uh our code that
1:20:49
we've been playing with before so we can add here right hello world world how are you and we're getting different tokens
1:20:55
but now you can see what if what happens if I put end of text you see how until I
1:21:02
finished it these are all different tokens end of text still set different tokens and now
1:21:08
when I finish it suddenly we get token 50256 and the reason this works is
1:21:15
because this didn't actually go through the bpe merges instead the code that
1:21:21
actually outposted tokens has special case instructions for handling special
1:21:28
tokens um we did not see these special instructions for handling special tokens in the encoder dopy it's absent there
1:21:36
but if you go to Tech token Library which is uh implemented in Rust you will find all kinds of special case handling
1:21:42
for these special tokens that you can register uh create adds to the vocabulary and then it looks for them
1:21:49
and it uh whenever it sees these special tokens like this it will actually come in and swap in that special token so
1:21:56
these things are outside of the typical algorithm of uh B PA en coding so these special tokens are used
1:22:02
pervasively uh not just in uh basically base language modeling of predicting the next token in the sequence but
1:22:09
especially when it gets to later to the fine tuning stage and all of the chat uh gbt sort of aspects of it uh because we
1:22:15
don't just want to Del limit documents we want to delimit entire conversations between an assistant and a user so if I
1:22:21
refresh this sck tokenizer page the default example that they have here is using not sort of base model encoders
1:22:30
but ftuned model uh sort of tokenizers um so for example using the GPT 3.5
1:22:35
turbo scheme these here are all special tokens I am start I end Etc uh this is
1:22:43
short for Imaginary mcore start by the way but you can see here that there's a
1:22:49
sort of start and end of every single message and there can be many other other tokens lots of tokens um in use to
1:22:56
delimit these conversations and kind of keep track of the flow of the messages here now we can go back to the Tik token
1:23:03
library and here when you scroll to the bottom they talk about how you can extend tick token and I can you can
1:23:10
create basically you can Fork uh the um CL 100K base tokenizers in gp4 and for
1:23:17
example you can extend it by adding more special tokens and these are totally up to you you can come up with any arbitrary tokens and add them with the
1:23:23
new ID afterwards and the tikken library will uh correctly swap them out uh when
1:23:29
it sees this in the strings now we can also go back to this
1:23:34
file which we've looked at previously and I mentioned that the gpt2 in Tik toen open
1:23:41
I.P we have the vocabulary we have the pattern for splitting and then here we are registering the single special token
1:23:48
in gpd2 which was the end of text token and we saw that it has this ID in GPT 4 when they defy this here you
1:23:56
see that the pattern has changed as we've discussed but also the special tokens have changed in this tokenizer so
1:24:01
we of course have the end of text just like in gpd2 but we also see three sorry
1:24:06
four additional tokens here Thim prefix middle and suffix what is fim fim is
1:24:12
short for fill in the middle and if you'd like to learn more about this idea it comes from this paper um and I'm not
1:24:20
going to go into detail in this video it's beyond this video and then there's one additional uh serve token here so
1:24:27
that's that encoding as well so it's very common basically to train a language model and then if you'd like uh
1:24:34
you can add special tokens now when you add special tokens you of course have to
1:24:39
um do some model surgery to the Transformer and all the parameters involved in that Transformer because you
1:24:45
are basically adding an integer and you want to make sure that for example your embedding Matrix for the vocabulary
1:24:50
tokens has to be extended by adding a row and typically this row would be initialized uh with small random numbers
1:24:56
or something like that because we need to have a vector that now stands for that token in addition to that you have
1:25:03
to go to the final layer of the Transformer and you have to make sure that that projection at the very end into the classifier uh is extended by
1:25:09
one as well so basically there's some model surgery involved that you have to couple with the tokenization changes if
1:25:16
you are going to add special tokens but this is a very common operation that people do especially if they'd like to
1:25:21
fine tune the model for example taking it from a base model to a chat model like chat
1:25:27
GPT okay so at this point you should have everything you need in order to build your own gp4 tokenizer now in the
minbpe exercise time! write your own GPT-4 tokenizer
1:25:33
process of developing this lecture I've done that and I published the code under this repository
1:25:38
MBP so MBP looks like this right now as I'm recording but uh the MBP repository
1:25:45
will probably change quite a bit because I intend to continue working on it um in addition to the MBP repository I've
1:25:51
published the this uh exercise progression that you can follow so if you go to exercise. MD here uh this is
1:25:58
sort of me breaking up the task ahead of you into four steps that sort of uh
1:26:03
build up to what can be a gp4 tokenizer and so feel free to follow these steps exactly and follow a little bit of the
1:26:10
guidance that I've laid out here and anytime you feel stuck just reference the MBP repository here so either the
1:26:17
tests could be useful or the MBP repository itself I try to keep the code fairly clean and understandable and so
1:26:26
um feel free to reference it whenever um you get stuck uh in addition to that basically
1:26:32
once you write it you should be able to reproduce this behavior from Tech token so getting the gb4 tokenizer you can
1:26:39
take uh you can encode the string and you should get these tokens and then you can encode and decode the exact same
1:26:44
string to recover it and in addition to all that you should be able to implement your own train function uh which Tik
1:26:50
token Library does not provide it's it's again only inference code but you could write your own train MBP does it as well
1:26:57
and that will allow you to train your own token vocabularies so here are some of the code inside M be mean bpe uh shows the
1:27:06
token vocabularies that you might obtain so on the left uh here we have the GPT 4
1:27:12
merges uh so the first 256 are raw individual bytes and then here I am
1:27:17
visualizing the merges that gp4 performed during its training so the very first merge that gp4 did was merge
1:27:24
two spaces into a single token for you know two spaces and that is a token 256
1:27:30
and so this is the order in which things merged during gb4 training and this is the merge order that um we obtain in MBP
1:27:39
by training a tokenizer and in this case I trained it on a Wikipedia page of Taylor Swift uh not because I'm a Swifty
1:27:45
but because that is one of the longest um Wikipedia Pages apparently that's available but she is pretty cool and
1:27:54
um what was I going to say yeah so you can compare these two uh vocabularies
1:27:59
and so as an example um here GPT for merged I in to become in and we've done
1:28:06
the exact same thing on this token 259 here space t becomes space t and that
1:28:13
happened for us a little bit later as well so the difference here is again to my understanding only a difference of
1:28:18
the training set so as an example because I see a lot of white space I supect that gp4 probably had a lot of
1:28:23
python code in its training set I'm not sure uh for the tokenizer and uh here we see much less
1:28:30
of that of course in the Wikipedia page so roughly speaking they look the same and they look the same because they're
1:28:35
running the same algorithm and when you train your own you're probably going to get something similar depending on what
1:28:41
you train it on okay so we are now going to move on from tick token and the way that open AI tokenizes its strings and
sentencepiece library intro, used to train Llama 2 vocabulary
1:28:47
we're going to discuss one more very commonly used library for working with tokenization inlm
1:28:52
and that is sentence piece so sentence piece is very commonly used in language
1:28:58
models because unlike Tik token it can do both training and inference and is quite efficient at both it supports a
1:29:04
number of algorithms for training uh vocabularies but one of them is the B pair en coding algorithm that we've been
1:29:10
looking at so it supports it now sentence piece is used both by llama and
1:29:15
mistal series and many other models as well it is on GitHub under Google
1:29:20
sentence piece and the big difference with sentence piece and we're going to look at example
1:29:26
because this is kind of hard and subtle to explain is that they think different about the order of operations here so in
1:29:35
the case of Tik token we first take our code points in the string we encode them
1:29:41
using mutf to bytes and then we're merging bytes it's fairly straightforward for sentence piece um it
1:29:48
works directly on the level of the code points themselves so so it looks at whatever code points are available in
1:29:53
your training set and then it starts merging those code points and um the bpe
1:29:59
is running on the level of code points and if you happen to run out of code points so there are maybe some rare
1:30:06
uh code points that just don't come up too often and the Rarity is determined by this character coverage hyper parameter then these uh code points will
1:30:14
either get mapped to a special unknown token like ank or if you have the bite
1:30:19
foldback option turned on then that will take those rare Cod points it will encode them using utf8 and then the
1:30:26
individual bytes of that encoding will be translated into tokens and there are these special bite tokens that basically
1:30:32
get added to the vocabulary so it uses BP on on the code points and then it
1:30:38
falls back to bytes for rare Cod points um and so that's kind of like difference
1:30:44
personally I find the Tik token we significantly cleaner uh but it's kind of like a subtle but pretty major difference between the way they approach
1:30:50
tokenization let's work with with a concrete example because otherwise this is kind of hard to um to get your head
1:30:56
around so let's work with a concrete example this is how we can import sentence piece and then here we're going
1:31:03
to take I think I took like the description of sentence piece and I just created like a little toy data set it
1:31:08
really likes to have a file so I created a toy. txt file with this content now what's kind of a little bit
1:31:15
crazy about sentence piece is that there's a ton of options and configurations and the reason this is so
1:31:20
is because sentence piece has been around I think for a while and it really tries to handle a large diversity of things and um because it's been around I
1:31:28
think it has quite a bit of accumulated historical baggage uh as well and so in
1:31:33
particular there's like a ton of configuration arguments this is not even all of it you can go to here to see all
1:31:39
the training options um and uh there's also quite useful documentation when you look at
1:31:45
the raw Proto buff uh that is used to represent the trainer spec and so on um
1:31:52
many of these options are irrelevant to us so maybe to point out one example Das Das shrinking Factor uh this shrinking
1:31:59
factor is not used in the B pair en coding algorithm so this is just an argument that is irrelevant to us um it
1:32:05
applies to a different training algorithm now what I tried to do here is
1:32:11
I tried to set up sentence piece in a way that is very very similar as far as I can tell to maybe identical hopefully
1:32:18
to the way that llama 2 was strained so the way they trained their own um their
1:32:25
own tokenizer and the way I did this was basically you can take the tokenizer model file that meta released and you
1:32:31
can um open it using the Proto protuff uh sort of file that you can generate
1:32:38
and then you can inspect all the options and I tried to copy over all the options that looked relevant so here we set up
1:32:43
the input it's raw text in this file here's going to be the output so it's going to be for talk 400. model and
1:32:50
vocab we're saying that we're going to use the BP algorithm and we want to Bap size of
1:32:56
400 then there's a ton of configurations here
1:33:01
for um for basically pre-processing and normalization rules as they're called
1:33:07
normalization used to be very prevalent I would say before llms in natural language processing so in machine
1:33:12
translation and uh text classification and so on you want to normalize and simplify the text and you want to turn
1:33:18
it all lowercase and you want to remove all double whites space Etc and in language models we prefer not to
1:33:23
do any of it or at least that is my preference as a deep learning person you want to not touch your data you want to
1:33:28
keep the raw data as much as possible um in a raw form so you're basically trying to turn
1:33:35
off a lot of this if you can the other thing that sentence piece does is that it has this concept of sentences so
1:33:43
sentence piece it's back it's kind of like was developed I think early in the days where there was um an idea that
1:33:50
they you're training a tokenizer on a bunch of independent sentences so it has a lot of like how many sentences you're
1:33:56
going to train on what is the maximum sentence length um shuffling sentences and so for it
1:34:03
sentences are kind of like the individual training examples but again in the context of llms I find that this is like a very spous and weird
1:34:10
distinction like sentences are just like don't touch the raw data sentences
1:34:15
happen to exist but in raw data sets there are a lot of like inet like what exactly is a sentence what isn't a
1:34:22
sentence um and so I think like it's really hard to Define what an actual sentence is if you really like dig into
1:34:28
it and there could be different concepts of it in different languages or something like that so why even
1:34:33
introduce the concept it it doesn't honestly make sense to me I would just prefer to treat a file as a giant uh
1:34:39
stream of bytes it has a lot of treatment around rare word characters and when I say word
1:34:45
I mean code points we're going to come back to this in a second and it has a lot of other rules for um basically
1:34:51
splitting digits splitting white space and numbers and how you deal with that so these are some kind of like merge
1:34:58
rules so I think this is a little bit equivalent to tick token using the regular expression to split up
1:35:04
categories there's like kind of equivalence of it if you squint T it in sentence piece where you can also for
1:35:10
example split up split up the digits uh and uh so
1:35:15
on there's a few more things here that I'll come back to in a bit and then there are some special tokens that you can indicate and it hardcodes the UN
1:35:23
token the beginning of sentence end of sentence and a pad token um and the UN
1:35:29
token must exist for my understanding and then some some things so we can
1:35:34
train and when when I press train it's going to create this file talk 400.
1:35:40
model and talk 400. wab I can then load the model file and I can inspect the
1:35:45
vocabulary off it and so we trained vocab size 400 on this text here and
1:35:53
these are the individual pieces the individual tokens that sentence piece will create so in the beginning we see
1:35:58
that we have the an token uh with the ID zero then we have the beginning of
1:36:04
sequence end of sequence one and two and then we said that the pad ID is negative
1:36:09
1 so we chose not to use it so there's no pad ID here then these are individual bite
1:36:16
tokens so here we saw that bite fallback in llama was turned on so it's true so
1:36:23
what follows are going to be the 256 bite tokens and these are their
1:36:31
IDs and then at the bottom after the bite tokens come the
1:36:37
merges and these are the parent nodes in the merges so we're not seeing the children we're just seeing the parents
1:36:43
and their ID and then after the merges comes eventually the individual
1:36:50
tokens and their IDs and so these are the individual tokens so these are the individual code Point tokens if you will
1:36:58
and they come at the end so that is the ordering with which sentence piece sort of like represents its vocabularies it
1:37:03
starts with special tokens then the bike tokens then the merge tokens and then the individual codo tokens and all these
1:37:11
raw codepoint to tokens are the ones that it encountered in the training set so those individual code points are
1:37:19
all the the entire set of code points that occurred here so those all get put in there and
1:37:27
then those that are extremely rare as determined by character coverage so if a code Point occurred only a single time
1:37:32
out of like a million um sentences or something like that then it would be ignored and it would not be added to our
1:37:40
uh vocabulary once we have a vocabulary we can encode into IDs and we can um sort
1:37:46
of get a list and then here I am also decoding the indiv idual tokens back into little
1:37:54
pieces as they call it so let's take a look at what happened here hello space
1:38:01
on so these are the token IDs we got back and when we look here uh a few
1:38:07
things sort of uh jump to mind number one take a look at these characters the
1:38:14
Korean characters of course were not part of the training set so sentence piece is encountering code points that
1:38:19
it has not seen during training time and those code points do not have a token associated with them so suddenly these
1:38:26
are un tokens unknown tokens but because bite fall back as true instead sentence
1:38:33
piece falls back to bytes and so it takes this it encodes it with utf8 and
1:38:39
then it uses these tokens to represent uh those bytes and that's what we are
1:38:45
getting sort of here this is the utf8 uh encoding and in this shifted by three uh
1:38:52
because of these um special tokens here that have IDs earlier on so that's what
1:38:58
happened here now one more thing that um well first before I go on with respect
1:39:05
to the bitef back let me remove bite foldback if this is false what's going
1:39:10
to happen let's retrain so the first thing that happened is all the bite tokens disappeared right
1:39:17
and now we just have the merges and we have a lot more merges now because we have a lot more space because we're not taking up space in the wab size uh with
1:39:25
all the bytes and now if we encode this we get a zero so this entire string
1:39:33
here suddenly there's no bitef back so this is unknown and unknown is an and so
1:39:39
this is zero because the an token is token zero and you have to keep in mind
1:39:44
that this would feed into your uh language model so what is a language model supposed to do when all kinds of different things that are unrecognized
1:39:52
because they're rare just end up mapping into Unk it's not exactly the property that you want so that's why I think
1:39:57
llama correctly uh used by fallback true uh because we definitely want to feed
1:40:03
these um unknown or rare code points into the model and some uh some manner the next thing I want to show you is the
1:40:10
following notice here when we are decoding all the individual tokens you see how spaces uh space here ends up
1:40:18
being this um bold underline I'm not 100% sure by the way why sentence piece
1:40:23
switches whites space into these bold underscore characters maybe it's for visualization I'm not 100% sure why that
1:40:29
happens uh but notice this why do we have an extra space in the front of
1:40:37
hello um what where is this coming from well it's coming from this option
1:40:43
here um add dummy prefix is true and when you
1:40:48
go to the documentation add D whites space at the beginning of text in order to treat World in world and hello world in the
1:40:55
exact same way so what this is trying to do is the following if we go back to our tick
1:41:02
tokenizer world as uh token by itself has a different ID than space world so
1:41:10
we have this is 1917 but this is 14 Etc so these are two different tokens for
1:41:16
the language model and the language model has to learn from data that they are actually kind of like a very similar concept so to the language model in the
1:41:23
Tik token World um basically words in the beginning of sentences and words in the middle of sentences actually look
1:41:29
completely different um and it has to learned that they are roughly the same
1:41:34
so this add dami prefix is trying to fight that a little bit and the way that works is that it basically
1:41:41
uh adds a dummy prefix so for as a as a
1:41:46
part of pre-processing it will take the string and it will add a space it will do this and that's done in an effort to
1:41:54
make this world and that world the same they will both be space world so that's
1:42:00
one other kind of pre-processing option that is turned on and llama 2 also uh uses this option and that's I think
1:42:07
everything that I want to say for my preview of sentence piece and how it is different um maybe here what I've done
1:42:13
is I just uh put in the Raw protocol buffer representation basically of the
1:42:19
tokenizer the too trained so feel free to sort of Step through this and if you would like uh your tokenization to look
1:42:27
identical to that of the meta uh llama 2 then you would be copy pasting these settings as I tried to do up above and
1:42:34
uh yeah that's I think that's it for this section I think my summary for sentence piece from all of this is
1:42:40
number one I think that there's a lot of historical baggage in sentence piece a lot of Concepts that I think are slightly confusing and I think
1:42:47
potentially um contain foot guns like this concept of a sentence and it's maximum length and stuff like that um
1:42:53
otherwise it is fairly commonly used in the industry um because it is efficient
1:42:58
and can do both training and inference uh it has a few quirks like for example un token must exist and the way the bite
1:43:05
fallbacks are done and so on I don't find particularly elegant and unfortunately I have to say it's not very well documented so it took me a lot
1:43:11
of time working with this myself um and just visualizing things and trying to really understand what is happening here
1:43:17
because uh the documentation unfortunately is in my opion not not super amazing but it is a very nice repo
1:43:24
that is available to you if you'd like to train your own tokenizer right now okay let me now switch gears again as we're starting to slowly wrap up here I
how to set vocabulary set? revisiting gpt.py transformer
1:43:31
want to revisit this issue in a bit more detail of how we should set the vocap size and what are some of the considerations around it so for this I'd
1:43:39
like to go back to the model architecture that we developed in the last video when we built the GPT from
1:43:44
scratch so this here was uh the file that we built in the previous video and we defined the Transformer model and and
1:43:51
let's specifically look at Bap size and where it appears in this file so here we Define the voap size uh at this time it
1:43:58
was 65 or something like that extremely small number so this will grow much larger you'll see that Bap size doesn't
1:44:04
come up too much in most of these layers the only place that it comes up to is in exactly these two places here so when we
1:44:11
Define the language model there's the token embedding table which is this two-dimensional array where the vocap
1:44:18
size is basically the number of rows and uh each vocabulary element each token
1:44:23
has a vector that we're going to train using back propagation that Vector is of size and embed which is number of
1:44:29
channels in the Transformer and basically as voap size increases this embedding table as I mentioned earlier
1:44:35
is going to also grow we're going to be adding rows in addition to that at the end of the Transformer there's this LM
1:44:41
head layer which is a linear layer and you'll notice that that layer is used at the very end to produce the logits uh
1:44:48
which become the probabilities for the next token in sequence and so intuitively we're trying to produce a
1:44:53
probability for every single token that might come next at every point in time of that Transformer and if we have more
1:45:01
and more tokens we need to produce more and more probabilities so every single token is going to introduce an
1:45:06
additional dot product that we have to do here in this linear layer for this final layer in a
1:45:11
Transformer so why can't vocap size be infinite why can't we grow to Infinity
1:45:16
well number one your token embedding table is going to grow uh your linear
1:45:21
layer is going to grow so we're going to be doing a lot more computation here because this LM head layer will become more computational expensive number two
1:45:29
because we have more parameters we could be worried that we are going to be under trining some of these
1:45:35
parameters so intuitively if you have a very large vocabulary size say we have a million uh tokens then every one of
1:45:41
these tokens is going to come up more and more rarely in the training data because there's a lot more other tokens
1:45:46
all over the place and so we're going to be seeing fewer and fewer examples uh for each individual token and you might
1:45:53
be worried that basically the vectors associated with every token will be undertrained as a result because they just don't come up too often and they
1:45:59
don't participate in the forward backward pass in addition to that as your vocab size grows you're going to start shrinking your sequences a lot
1:46:07
right and that's really nice because that means that we're going to be attending to more and more text so that's nice but also you might be
1:46:13
worrying that two large of chunks are being squished into single tokens and so the model just doesn't have as much of
1:46:20
time to think per sort of um some number of characters in the text or you can
1:46:26
think about it that way right so basically we're squishing too much information into a single token and then the forward pass of the Transformer is
1:46:33
not enough to actually process that information appropriately and so these are some of the considerations you're thinking about when you're designing the
1:46:38
vocab size as I mentioned this is mostly an empirical hyperparameter and it seems like in state-of-the-art architectures
1:46:44
today this is usually in the high 10,000 or somewhere around 100,000 today and
1:46:49
the next consideration I want to briefly talk about is what if we want to take a pre-trained model and we want to extend
1:46:55
the vocap size and this is done fairly commonly actually so for example when you're doing fine-tuning for cha GPT um
1:47:02
a lot more new special tokens get introduced on top of the base model to maintain the metadata and all the
1:47:08
structure of conversation objects between a user and an assistant so that takes a lot of special tokens you might
1:47:14
also try to throw in more special tokens for example for using the browser or any other tool and so it's very tempting to
1:47:20
add a lot of tokens for all kinds of special functionality so if you want to be adding a token that's totally
1:47:25
possible Right all we have to do is we have to resize this embedding so we have to add rows we would initialize these uh
1:47:32
parameters from scratch to be small random numbers and then we have to extend the weight inside this linear uh
1:47:39
so we have to start making dot products um with the associated parameters as well to basically calculate the
1:47:44
probabilities for these new tokens so both of these are just a resizing operation it's a very mild
1:47:50
model surgery and can be done fairly easily and it's quite common that basically you would freeze the base model you introduce these new parameters
1:47:57
and then you only train these new parameters to introduce new tokens into the architecture um and so you can
1:48:03
freeze arbitrary parts of it or you can train arbitrary parts of it and that's totally up to you but basically minor
1:48:08
surgery required if you'd like to introduce new tokens and finally I'd like to mention that actually there's an
training new tokens, example of prompt compression
1:48:13
entire design space of applications in terms of introducing new tokens into a vocabulary that go Way Beyond just
1:48:19
adding special tokens and special new functionality so just to give you a sense of the design space but this could be an entire video just by itself uh
1:48:26
this is a paper on learning to compress prompts with what they called uh gist tokens and the rough idea is suppose
1:48:33
that you're using language models in a setting that requires very long prompts while these long prompts just slow
1:48:38
everything down because you have to encode them and then you have to use them and then you're tending over them and it's just um you know heavy to have
1:48:45
very large prompts so instead what they do here in this paper is they introduce
1:48:50
new tokens and um imagine basically having a few new tokens you put them in
1:48:56
a sequence and then you train the model by distillation so you are keeping the
1:49:01
entire model Frozen and you're only training the representations of the new tokens their embeddings and you're
1:49:06
optimizing over the new tokens such that the behavior of the language model is identical uh to the model that has a
1:49:15
very long prompt that works for you and so it's a compression technique of compressing that very long prompt into
1:49:20
those few new gist tokens and so you can train this and then at test time you can discard your old prompt and just swap in
1:49:26
those tokens and they sort of like uh stand in for that very long prompt and have an almost identical performance and
1:49:33
so this is one um technique and a class of parameter efficient fine-tuning techniques where most of the model is
1:49:39
basically fixed and there's no training of the model weights there's no training of Laura or anything like that of new
1:49:45
parameters the the parameters that you're training are now just the uh token embeddings so that's just one
1:49:51
example but this could again be like an entire video but just to give you a sense that there's a whole design space here that is potentially worth exploring
1:49:57
in the future the next thing I want to briefly address is that I think recently there's a lot of momentum in how you
multimodal [image, video, audio] tokenization with vector quantization
1:50:03
actually could construct Transformers that can simultaneously process not just text as the input modality but a lot of
1:50:08
other modalities so be it images videos audio Etc and how do you feed in all
1:50:14
these modalities and potentially predict these modalities from a Transformer uh do you have to change the architecture
1:50:19
in some fundamental way and I think what a lot of people are starting to converge towards is that you're not changing the architecture you stick with the
1:50:25
Transformer you just kind of tokenize your input domains and then call the day and pretend it's just text tokens and
1:50:31
just do everything else identical in an identical manner so here for example there was a early paper that has nice
1:50:37
graphic for how you can take an image and you can chunc at it into integers um and these sometimes uh so
1:50:45
these will basically become the tokens of images as an example and uh these tokens can be uh hard tokens where you
1:50:52
force them to be integers they can also be soft tokens where you uh sort of don't require uh these to be discrete
1:51:00
but you do Force these representations to go through bottlenecks like in Auto encoders uh also in this paper that came
1:51:06
out from open a SORA which I think really um uh blew the mind of many people and inspired a lot of people in
1:51:13
terms of what's possible they have a Graphic here and they talk briefly about how llms have text tokens Sora has
1:51:20
visual patches so again they came up with a way to chunc a videos into basically tokens when they own
1:51:26
vocabularies and then you can either process discrete tokens say with autog regressive models or even soft tokens
1:51:32
with diffusion models and uh all of that is sort of uh being actively worked on
1:51:38
designed on and is beyond the scope of this video but just something I wanted to mention briefly okay now that we have come quite deep into the tokenization
revisiting and explaining the quirks of LLM tokenization
1:51:45
algorithm and we understand a lot more about how it works let's loop back around to the beginning of this video
1:51:50
and go through some of these bullet points and really see why they happen so first of all why can't my llm spell
1:51:56
words very well or do other spell related tasks so fundamentally this is because
1:52:02
as we saw these characters are chunked up into tokens and some of these tokens
1:52:07
are actually fairly long so as an example I went to the gp4 vocabulary and I looked at uh one of the longer tokens
1:52:15
so that default style turns out to be a single individual token so that's a lot of characters for a single token so my
1:52:22
suspicion is that there's just too much crammed into this single token and my suspicion was that the model should not
1:52:27
be very good at tasks related to spelling of this uh single token so I
1:52:34
asked how many letters L are there in the word default style and of course my
1:52:41
prompt is intentionally done that way and you see how default style will be a single token so this is what the model
1:52:47
sees so my suspicion is that it wouldn't be very good at this and indeed it is not it doesn't actually know how many
1:52:53
L's are in there it thinks there are three and actually there are four if I'm not getting this wrong myself so that
1:52:59
didn't go extremely well let's look look at another kind of uh character level task so for example here I asked uh gp4
1:53:08
to reverse the string default style and they tried to use a code interpreter and I stopped it and I said just do it just
1:53:15
try it and uh it gave me jumble so it doesn't actually really know how to
1:53:21
reverse this string going from right to left uh so it gave a wrong result so
1:53:26
again like working with this working hypothesis that maybe this is due to the tokenization I tried a different
1:53:31
approach I said okay let's reverse the exact same string but take the following approach step one just print out every
1:53:38
single character separated by spaces and then as a step two reverse that list and it again Tred to use a tool but when I
1:53:44
stopped it it uh first uh produced all the characters and that was actually correct and then It reversed them and
1:53:50
that was correct once it had this so somehow it can't reverse it directly but when you go just first uh you know
1:53:57
listing it out in order it can do that somehow and then it can once it's uh broken up this way this becomes all
1:54:03
these individual characters and so now this is much easier for it to see these individual tokens and reverse them and
1:54:10
print them out so that is kind of interesting so let's continue now why
1:54:16
are llms worse at uh non-english langu and I briefly covered this already but
1:54:22
basically um it's not only that the language model sees less non-english data during training of the model
1:54:28
parameters but also the tokenizer is not um is not sufficiently trained on
1:54:34
non-english data and so here for example hello how are you is five tokens and its
1:54:40
translation is 15 tokens so this is a three times blow up and so for example
1:54:45
anang is uh just hello basically in Korean and that end up being three tokens I'm actually kind of surprised by
1:54:51
that because that is a very common phrase there just the typical greeting of like hello and that ends up being
1:54:57
three tokens whereas our hello is a single token and so basically everything is a lot more bloated and diffuse and
1:55:02
this is I think partly the reason that the model Works worse on other languages uh coming back why is LM bad
1:55:10
at simple arithmetic um that has to do with the tokenization of numbers and so
1:55:17
um you'll notice that for example addition is very sort of like uh there's an algorithm that is
1:55:23
like character level for doing addition so for example here we would first add the ones and then the tens and then the
1:55:29
hundreds you have to refer to specific parts of these digits but uh these
1:55:34
numbers are represented completely arbitrarily based on whatever happened to merge or not merge during the tokenization process there's an entire
1:55:41
blog post about this that I think is quite good integer tokenization is insane and this person basically
1:55:46
systematically explores the tokenization of numbers in I believe this is gpt2 and
1:55:52
so they notice that for example for the for um four-digit numbers you can take a
1:55:57
look at whether it is uh a single token or whether it is two tokens that is a 1 three or a 2 two or a 31 combination and
1:56:04
so all the different numbers are all the different combinations and you can imagine this is all completely arbitrarily so and the model
1:56:11
unfortunately sometimes sees uh four um a token for for all four digits
1:56:16
sometimes for three sometimes for two sometimes for one and it's in an arbitrary uh Manner and so this is
1:56:22
definitely a headwind if you will for the language model and it's kind of incredible that it can kind of do it and
1:56:27
deal with it but it's also kind of not ideal and so that's why for example we saw that meta when they train the Llama
1:56:34
2 algorithm and they use sentence piece they make sure to split up all the um
1:56:39
all the digits as an example for uh llama 2 and this is partly to improve a
1:56:44
simple arithmetic kind of performance and finally why is gpt2 not
1:56:50
as good in Python again this is partly a modeling issue on in the architecture and the data set and the strength of the
1:56:56
model but it's also partially tokenization because as we saw here with the simple python example the encoding
1:57:03
efficiency of the tokenizer for handling spaces in Python is terrible and every single space is an individual token and
1:57:09
this dramatically reduces the context length that the model can attend to cross so that's almost like a tokenization bug for gpd2 and that was
1:57:16
later fixed with gp4 okay so here's another fun one my llm abruptly halts
1:57:22
when it sees the string end of text so here's um here's a very strange Behavior
1:57:28
print a string end of text is what I told jt4 and it says could you please specify the string and I'm I'm telling
1:57:35
it give me end of text and it seems like there's an issue it's not seeing end of text and then I give it end of text is
1:57:41
the string and then here's a string and then it just doesn't print it so obviously something is breaking here
1:57:47
with respect to the handling of the special token and I don't actually know what open ey is doing under the hood
1:57:52
here and whether they are potentially parsing this as an um as an actual token
1:57:58
instead of this just being uh end of text um as like individual sort of
1:58:04
pieces of it without the special token handling logic and so it might be that someone when they're calling do encode
1:58:11
uh they are passing in the allowed special and they are allowing end of text as a special character in the user
1:58:18
prompt but the user prompt of course is is a sort of um attacker controlled text
1:58:23
so you would hope that they don't really parse or use special tokens or you know
1:58:28
from that kind of input but it appears that there's something definitely going wrong here and um so your knowledge of
1:58:34
these special tokens ends up being in a tax surface potentially and so if you'd like to confuse llms then just um try to
1:58:43
give them some special tokens and see if you're breaking something by chance okay so this next one is a really fun one uh
1:58:49
the trailing whites space issue so if you come to playground and uh we come
1:58:56
here to GPT 3.5 turbo instruct so this is not a chat model this is a completion model so think of it more like it's a
1:59:02
lot more closer to a base model it does completion it will continue the token sequence so here's a tagline for ice
1:59:09
cream shop and we want to continue the sequence and so we can submit and get a bunch of tokens okay no problem but now
1:59:18
suppose I do this but instead of pressing submit here I do here's a tagline for ice cream shop space so I
1:59:26
have a space here before I click submit we get a warning your text ends
1:59:31
in a trail Ling space which causes worse performance due to how API splits text into tokens so what's happening here it
1:59:38
still gave us a uh sort of completion here but let's take a look at what's happening so here's a tagline for an ice
1:59:44
cream shop and then what does this look like in the actual actual training data
1:59:50
suppose you found the completion in the training document somewhere on the internet and the llm trained on this
1:59:55
data so maybe it's something like oh yeah maybe that's the tagline that's a terrible tagline but notice here that
2:00:02
when I create o you see that because there's the the space character is
2:00:07
always a prefix to these tokens in GPT so it's not an O token it's a space o
2:00:13
token the space is part of the O and together they are token 8840 that's
2:00:19
that's space o so what's What's Happening Here is that when I just have it like this and I let it complete the
2:00:27
next token it can sample the space o token but instead if I have this and I
2:00:32
add my space then what I'm doing here when I incode this string is I have
2:00:37
basically here's a t line for an ice cream uh shop and this space at the very end becomes a token
2:00:44
220 and so we've added token 220 and this token otherwise would be part of
2:00:49
the tagline because if there actually is a tagline here so space o is the token
2:00:55
and so this is suddenly a of distribution for the model because this space is part of the next token but
2:01:01
we're putting it here like this and the model has seen very very little data of
2:01:07
actual Space by itself and we're asking it to complete the sequence like add in more tokens but the problem is that
2:01:13
we've sort of begun the first token and now it's been split up and now we're out
2:01:18
of this distribution and now arbitrary bad things happen and it's just a very rare example for it to see something
2:01:24
like that and uh that's why we get the warning so the fundamental issue here is of course that um the llm is on top of
2:01:32
these tokens and these tokens are text chunks they're not characters in a way you and I would think of them they are
2:01:38
these are the atoms of what the LM is seeing and there's a bunch of weird stuff that comes out of it let's go back
2:01:43
to our default cell style I bet you that the model has never in its training set
2:01:49
seen default cell sta without Le in there it's always seen this as a single
2:01:56
group because uh this is some kind of a function in um I'm guess I don't
2:02:02
actually know what this is part of this is some kind of API but I bet you that it's never seen this combination of
2:02:07
tokens uh in its training data because or I think it would be extremely rare so
2:02:12
I took this and I copy pasted it here and I had I tried to complete from it
2:02:17
and the it immediately gave me a big error and it said the model predicted to completion that begins with a stop sequence resulting in no output consider
2:02:24
adjusting your prompt or stop sequences so what happened here when I clicked submit is that immediately the model
2:02:30
emitted and sort of like end of text token I think or something like that it basically predicted the stop sequence
2:02:36
immediately so it had no completion and so this is why I'm getting a warning again because we're off the data
2:02:42
distribution and the model is just uh predicting just totally arbitrary things
2:02:47
it's just really confused basically this is uh this is giving it brain damage it's never seen this before it's shocked
2:02:53
and it's predicting end of text or something I tried it again here and it in this case it completed it but then
2:02:59
for some reason this request May violate our usage policies this was flagged um basically something just like
2:03:06
goes wrong and there's something like Jank you can just feel the Jank because the model is like extremely unhappy with just this and it doesn't know how to
2:03:12
complete it because it's never occurred in training set in a training set it always appears like this and becomes a
2:03:18
single token so these kinds of issues where tokens are either you sort of like complete the
2:03:24
first character of the next token or you are sort of you have long tokens that you then have just some of the
2:03:29
characters off all of these are kind of like issues with partial tokens is how I
2:03:35
would describe it and if you actually dig into the T token repository go to the rust code and
2:03:41
search for unstable and you'll see um en code
2:03:47
unstable native unstable token tokens and a lot of like special case handling none of this stuff about unstable tokens
2:03:53
is documented anywhere but there's a ton of code dealing with unstable tokens and unstable tokens is exactly kind of like
2:04:00
what I'm describing here what you would like out of a completion API is something a lot more fancy like if we're
2:04:06
putting in default cell sta if we're asking for the next token sequence we're not actually trying to append the next
2:04:12
token exactly after this list we're actually trying to append we're trying to consider lots of tokens um
2:04:19
that if we were or I guess like we're trying to search over characters that if
2:04:25
we retened would be of high probability if that makes sense um so that we can actually add a single individual
2:04:32
character uh instead of just like adding the next full token that comes after this partial token list so I this is
2:04:39
very tricky to describe and I invite you to maybe like look through this it ends up being extremely gnarly and hairy kind
2:04:44
of topic it and it comes from tokenization fundamentally so um maybe I can even spend an entire video talking
2:04:50
about unstable tokens sometime in the future okay and I'm really saving the best for last my favorite one by far is
2:04:56
the solid gold Magikarp and it just okay so this comes from this blog post uh solid gold
2:05:03
Magikarp and uh this is um internet famous now for those of us in llms and
2:05:10
basically I I would advise you to uh read this block Post in full but basically what this person was doing is
2:05:16
this person went to the um token embedding stable and clustered the
2:05:22
tokens based on their embedding representation and this person noticed that there's a cluster of tokens that
2:05:29
look really strange so there's a cluster here at rot e stream Fame solid gold Magikarp Signet message like really
2:05:36
weird tokens in uh basically in this embedding cluster and so what are these
2:05:42
tokens and where do they even come from like what is solid gold magikarpet makes no sense and then they found bunch of
2:05:48
these tokens and then they notice that actually the plot thickens here because if you ask the model about these tokens
2:05:56
like you ask it uh some very benign question like please can you repeat back to me the string sold gold Magikarp uh
2:06:02
then you get a variety of basically totally broken llm Behavior so either you get evasion so I'm sorry I can't
2:06:09
hear you or you get a bunch of hallucinations as a response um you can even get back like insults so you ask it
2:06:17
uh about streamer bot it uh tells the and the model actually just calls you names uh or it kind of comes up with
2:06:24
like weird humor like you're actually breaking the model by asking about these very simple strings like at Roth and
2:06:30
sold gold Magikarp so like what the hell is happening and there's a variety of here documented behaviors uh there's a
2:06:37
bunch of tokens not just so good Magikarp that have that kind of a behavior and so basically there's a
2:06:42
bunch of like trigger words and if you ask the model about these trigger words or you just include them in your prompt
2:06:48
the model goes haywire and has all kinds of uh really Strange Behaviors including sort of ones that violate typical safety
2:06:54
guidelines uh and the alignment of the model like it's swearing back at you so what is happening here and how can this
2:07:01
possibly be true well this again comes down to tokenization so what's happening here is that sold gold Magikarp if you
2:07:08
actually dig into it is a Reddit user so there's a u Sol gold
2:07:14
Magikarp and probably what happened here even though I I don't know that this has been like really definitively explored
2:07:20
but what is thought to have happened is that the tokenization data set was very
2:07:25
different from the training data set for the actual language model so in the tokenization data set there was a ton of
2:07:31
redded data potentially where the user solid gold Magikarp was mentioned in the text because solid gold Magikarp was a
2:07:39
very common um sort of uh person who would post a lot uh this would be a string that occurs many times in a
2:07:45
tokenization data set because it occurs many times in a tokenization data set these tokens would end up getting merged
2:07:51
to the single individual token for that single Reddit user sold gold Magikarp so they would have a dedicated token in a
2:07:58
vocabulary of was it 50,000 tokens in gpd2 that is devoted to that Reddit user
2:08:04
and then what happens is the tokenization data set has those strings but then later when you train the model
2:08:10
the language model itself um this data from Reddit was not present and so
2:08:16
therefore in the entire training set for the language model sold gold Magikarp never occurs that token never appears in
2:08:24
the training set for the actual language model later so this token never gets activated it's initialized at random in
2:08:31
the beginning of optimization then you have forward backward passes and updates to the model and this token is just never updated in the embedding table
2:08:37
that row Vector never gets sampled it never gets used so it never gets trained and it's completely untrained it's kind
2:08:43
of like unallocated memory in a typical binary program written in C or something like that that so it's unallocated
2:08:50
memory and then at test time if you evoke this token then you're basically plucking out a row of the embedding
2:08:55
table that is completely untrained and that feeds into a Transformer and creates undefined behavior and that's
2:09:00
what we're seeing here this completely undefined never before seen in a training behavior and so any of these
2:09:06
kind of like weird tokens would evoke this Behavior because fundamentally the model is um is uh uh out of sample out
2:09:14
of distribution okay and the very last thing I wanted to just briefly mention point out although I think a lot of
2:09:19
people are quite aware of this is that different kinds of formats and different representations and different languages
2:09:25
and so on might be more or less efficient with GPD tokenizers uh or any tokenizers for any other L for that
2:09:31
matter so for example Json is actually really dense in tokens and yaml is a lot more efficient in tokens um so for
2:09:39
example this are these are the same in Json and in yaml the Json is
2:09:44
116 and the yaml is 99 so quite a bit of an Improvement and so in the token
2:09:51
economy where we are paying uh per token in many ways and you are paying in the context length and you're paying in um
2:09:57
dollar amount for uh the cost of processing all this kind of structured data when you have to um so prefer to
2:10:03
use theal over Json and in general kind of like the tokenization density is something that you have to um sort of
2:10:09
care about and worry about at all times and try to find efficient encoding schemes and spend a lot of time in tick
2:10:15
tokenizer and measure the different token efficiencies of different formats and settings and so on okay so that
final recommendations
2:10:21
concludes my fairly long video on tokenization I know it's a try I know it's annoying I know it's irritating I
2:10:28
personally really dislike the stage what I do have to say at this point is don't brush it off there's a lot of foot guns
2:10:34
sharp edges here security issues uh AI safety issues as we saw plugging in unallocated memory into uh language
2:10:42
models so um it's worth understanding this stage um that said I will say that
2:10:48
eternal glory goes to anyone who can get rid of it uh I showed you one possible paper that tried to uh do that and I
2:10:54
think I hope a lot more can follow over time and my final recommendations for the application right now are if you can
2:11:01
reuse the GPT 4 tokens and the vocabulary uh in your application then that's something you should consider and just use Tech token because it is very
2:11:07
efficient and nice library for inference for bpe I also really like the bite
2:11:13
level BP that uh Tik toen and openi uses uh if you for some reason want to train
2:11:19
your own vocabulary from scratch um then I would use uh the bpe with sentence
2:11:25
piece um oops as I mentioned I'm not a huge fan of sentence piece I don't like
2:11:30
its uh bite fallback and I don't like that it's doing BP on unic code code points I think it's uh it also has like
2:11:37
a million settings and I think there's a lot of foot gonss here and I think it's really easy to Mis calibrate them and you end up cropping your sentences or
2:11:43
something like that uh because of some type of parameter that you don't fully understand so so be very careful with
2:11:49
the settings try to copy paste exactly maybe where what meta did or basically spend a lot of time looking at all the
2:11:56
hyper parameters and go through the code of sentence piece and make sure that you have this correct um but even if you
2:12:02
have all the settings correct I still think that the algorithm is kind of inferior to what's happening here and
2:12:07
maybe the best if you really need to train your vocabulary maybe the best thing is to just wait for M bpe to
2:12:13
becomes as efficient as possible and uh that's something that maybe I hope to work on and at some point maybe we can
2:12:20
be training basically really what we want is we want tick token but training code and that is the ideal thing that
2:12:27
currently does not exist and MBP is um is in implementation of it but currently
2:12:33
it's in Python so that's currently what I have to say for uh tokenization there might be an advanced video that has even
2:12:40
drier and even more detailed in the future but for now I think we're going to leave things off here and uh I hope
2:12:46
that was helpful bye
2:12:54
and uh they increase this contact size from gpt1 of 512 uh to 1024 and GPT 4
2:13:02
two the next okay next I would like us to briefly walk through the code from open
2:13:09
AI on the gpt2 encoded
2:13:15
ATP I'm sorry I'm gonna sneeze and then what's Happening Here
2:13:21
is this is a spous layer that I will explain in a bit What's Happening Here
2:13:33
is